const Discord = require("discord.js");

class Stts {
    constructor(nek){
		//this.version = "version";
		this.category = "transport"; // категория команд
		
		this.perms = ["EMBED_LINKS"];
        this.name = "stts"; // имя команды
		this.desc = "фотки с СТТС"; // описание команды в общем списке команд
		this.advdesc = "СТТС (совмещённый трамвайно-троллейбусный сайт), «Городской электротранспорт» или https://transphoto.org/ - сайт, где пользователи размещают фото электротранспортов. Данная команда позволяет искать и просматривать фото с этого сайта."; // описание команды в помоще по конкретной команде
		this.args = ""; // аргументы в общем списке команд
		this.advargs = "<номер ТС> <тип> <город>"; // описание аргументов в помоще по конкретной команде
		this.argsdesc = "Без аргументов будет найдена случайная фотография\n" + // аргументы в помоще по конкретной команде
		"<номер ТС> - бортовой номер транспорта\n" +
		"<тип> - трамвай (трам...), троллейбус (тро...), метрополитен (ме...), монорельс (мо...), фуникулёр (ф...), транслор (тран...), мувер или АТН (му...), маглев (ма...), электробус (э...)\n" +
		"<город> - город, где находится транспорт. Без аргумента будет произведён поиск по всем городам\n\n" +
		"||по сути эта команда нужна лишь для функционала команды оргп, но ладно||";
    }

    run(nek, client, msg, args){
		let embed = new Discord.EmbedBuilder() // составляем embed
			.setTitle('Пока эта команда используется только в команде orgp. Отдельно эта команда тоже будет работать через некоторое время') // заголовок
			.setColor(nek.config.basecolor) // цвет
		msg.reply({ embeds: [embed] }); // отправить
		return;
	}
	
	// API сайта
	// api.php?action=<действие>
	// ВХОД: параметр (смотрите к каждой функции)
	// ВЫХОД: массив объектов
	
	// getRandomPhotos - Получить n рандомных фото
	// Действие: get-random-photos
	// ВХОД: n (кол-во фото)
	// ВЫХОД:
	//	[
	//	 {
	//		label: <бортовой номер>,
	//		city: <город>, 		(например: "Санкт-Петербург")
	//		links: {
	//			city: <ссылка на город>,
	//			vehicle: <ссылка на транспорт>,
	//			photo: <ссылка на страницу с фотографией>
	//		},
	//		date: <день съемки фото>, 		(например: "23 ноября 2019 г.")
	//		fullPic: <ссылка на полную фотографию>,
	//		previewPic: <ссылка на превью фотографии>,
	//		id: <id на сайте>,
	//		comments: <кол-во комментариев под фотографией>
	//	 }, ...
	// ]
	getRandomPhotos(n){ 
		return false;
	}
	
	// getRecentPhotos - получить n последних фото
	// Действие: get-recent-photos
	// ВХОД: n (кол-во фото)
	//	[
	//	 {
	//		label: <бортовой номер>,
	//		city: <город>,
	//		links: {
	//			city: <ссылка на город>,
	//			vehicle: <ссылка на транспорт>,
	//			photo: <ссылка на страницу с фотографией>
	//		},
	//		date: <день съемки фото>,
	//		fullPic: <ссылка на полную фотографию>,
	//		previewPic: <ссылка на превью фотографии>,
	//		id: <id на сайте>,
	//		comments: <кол-во комментариев под фотографией>
	//	 }, ...
	// ]
	getRecentPhotos(){ 
		return false;
	}
	
	// getTop30 - получить 30 самых просматриваемых фото за последние 24 часа
	// top30.php
	//
	// Пока что сложно сделать, т.к. могуть быть не только фото транспорта, но и парка, схемы или чего- либо ещё. Сложно парсить все случаи
	getTop30(){ 
		return false;
	}
	
	// getCities - найти город.
	// > Аргумент может быть не полным именем города. Работает как поисковик короче. Без аргументов будет выведен полный перечень городов
	// Действие: get-cities
	// ВХОД: term (имя города)
	// ВЫХОД:
	// [
	//	{
	//		value: <id города?>,
	//		rid: <id страны>,
	//		city: <название города>,
	//		country: <название страны>,
	//		link: <ссылка на город>
	//	}, ...
	// ]
	getCities(){ 
		return false;
	}
	
	// searchTransport - поиск транспорта
	// Действие: index-qsearch
	// ВХОД:  num - номер, type - тип транспорта (ъ), ТС, city - город
	// > num обязателен
	// > без type будет поиск любого типа транспорта
	// > без city будет поиск в любом городе
	// ВЫХОД: 
	// [
	//	{
	//		link: <ссылка на транспорт>,
	//		model: <модель транспорта>,
	//		park: <наименование парка>,
	//		date: <годы эксплуатации>,
	//		city: <история городов> (а надо ли?)
	//	}
	// ]
	//  массив сортируется по годам эксплуатации. Т.е. если транспорт эксплуатируется, то он будет первее чем тот, что имеет тот же номер, но уже списан.
	searchTransport(){ 
		return false;
	}
	
	
	// а че это вообще?
	// Действие: get-groups
	// Действие: get-regions
	// Действие: get-pub-photos 
	
	// функции, если надо получить чето конкретное
	// ВХОД и ВЫХОД смотрите в инфе к каждой функции
	// потом
}

module.exports = Stts;

