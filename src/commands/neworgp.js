// == TODO
// - –î–æ–¥–µ–ª–∞—Ç—å —Å—Ç—Ä–∞–Ω–∏—Ü—É —Å —Ñ–æ—Ç–æ (–≤–∑—è—Ç—å —Ö–æ—Ç—è –±—ã –ø–ª–µ–π—Å—Ö–æ–ª–¥–µ—Ä –∏–∑ –∫–æ–º–∞–Ω–¥—ã stts)
// - DONE –°–¥–µ–ª–∞—Ç—å –±–æ–ª–µ–µ —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–æ–µ –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö –∫–Ω–æ–ø–æ–∫ (—ç—Ç–æ –∞–∫—Ç–∏–≤–Ω–æ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤ –∏–Ω—Ç–µ—Ä–∞–∫—Ü–∏—è—Ö)
// - –î–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –≤—ã–±–æ—Ä –æ—Ç–æ–±—Ä–∞–∂–∞—Ç—å —Å—Ç–æ—Ä–æ–Ω–Ω–∏–π —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç –∏–ª–∏ –Ω–µ—Ç (–≤—Ç–æ—Ä–æ–π —Å–ø–∏—Å–æ–∫ —Å–ø–∏—Å–æ–∫: —Ç–æ–ª—å–∫–æ –≤—ã–±—Ä–∞–Ω–Ω—ã–π, –Ω–∞ —Ç–æ–º –∂–µ –º–∞—Ä—à—Ä—É—Ç–µ, –≤—Å–µ <—Ç–∏–ø —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞>)
// - DONE –î–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –≤—ã–±–æ—Ä —Å—Ç–µ–ø–µ–Ω–∏ –∑—É–º–∞ (–µ—â—ë –æ–¥–∏–Ω–º —Ä—è–¥–æ–º –∫–Ω–æ–ø–æ–∫ –Ω–∏–∂–µ)

// == –ë–∏–±–ª–∏–æ—Ç–µ–∫–∏
const Discord = require("discord.js");
const https = require("https");
const fs = require("fs");
const StaticMaps = require('staticmaps');

// == –°–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –¥–ª—è HTTPS –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
const ca = fs.readFileSync('./src/assets/orgp/ca/russian_trusted_root_ca_pem.crt');

// == –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
//let requests = new Map(); // –∫–∞—Ä—Ç–∞, –≥–¥–µ —Ö—Ä–∞–Ω—è—Ç—Å—è –∑–∞–ø—Ä–æ—Å—ã (—Ç–∏–ø–æ –ø–æ –∫–ª—é—á—É (id —Å–æ–æ–±—â–µ–Ω–∏—è) –º–æ–∂–Ω–æ –ø–æ–ª—É—á–∏—Ç—å –æ–±—ä–µ–∫—Ç {msg: msg, info: {–≤—Å—è–∫–∞—è –∏–Ω—Ñ–∞})

// == –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã
// –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã (bbox), –≤ –ø—Ä–µ–¥–µ–ª–∞—Ö –∫–æ—Ç–æ—Ä—ã—Ö –Ω—É–∂–Ω–æ –∏—Å–∫–∞—Ç—å –º–∞—à–∏–Ω—ã
const fullbbox = "31.262970,60.444011,28.473816,59.451358"; // https://i.imgur.com/l6al1YY.png
const partbboxes = [ // https://i.imgur.com/ljnXWyw.png
	"31.262970,60.444011,28.473816,60.077345", // top
	"31.262970,60.077345,28.473816,59.983189", // upcity
	"31.262970,59.983189,28.473816,59.905812", // midcity
	"31.262970,59.905812,28.473816,59.830670", // downcity
	"31.262970,59.830670,28.473816,59.451358"  // bottom
] 

const readableType = { // —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤ —á–∏—Ç–∞–±–µ–ª—å–Ω—ã–π –≤–∏–¥ —Ç–∏–ø–æ–≤ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞
	'trolley': '—Ç—Ä–æ–ª–ª–µ–π–±—É—Å',
	'bus': '–∞–≤—Ç–æ–±—É—Å',
	'tram': '—Ç—Ä–∞–º–≤–∞–π'
}
const pluralReadableType = { // —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤ —á–∏—Ç–∞–±–µ–ª—å–Ω—ã–π –≤–∏–¥ —Ç–∏–ø–æ–≤ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞ (–≤–æ –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω–æ–º —á–∏—Å–ª–µ)
	'trolley': '—Ç—Ä–æ–ª–ª–µ–π–±—É—Å—ã',
	'bus': '–∞–≤—Ç–æ–±—É—Å—ã',
	'tram': '—Ç—Ä–∞–º–≤–∞–∏'
}
const dirToBlock = ["üü¶", "üüß"]; // –∞ —ç—Ç–æ –≤–æ–æ–±—â–µ –Ω–∞–¥–æ?

// == –û–±—Ä–∞–±–æ—Ç–∫–∞ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤
let argsProcess = {};
argsProcess.gui = async (nek, msg, args) => { // –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ —á–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫–∏, –µ—Å–ª–∏ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö –Ω–µ –∏–º–µ–µ—Ç—Å—è
	
	// –¥–µ–ª–∞–µ–º –≤–∫–ª—é—á–µ–Ω–Ω—ã–µ –∫–Ω–æ–ø–∫–∏
	const rowBefore = new Discord.ActionRowBuilder().addComponents(
		new Discord.ButtonBuilder()
			.setCustomId("label")
			.setLabel('–ü–æ –±–æ—Ä—Ç. –Ω–æ–º–µ—Ä—É')
			.setStyle(Discord.ButtonStyle.Primary)
			.setDisabled(false),
		new Discord.ButtonBuilder()
			.setCustomId("route")
			.setLabel('–ü–æ –Ω–æ–º–µ—Ä—É –º–∞—Ä—à—Ä—É—Ç–∞')
			.setStyle(Discord.ButtonStyle.Primary)
			.setDisabled(false),
		new Discord.ButtonBuilder()
			.setCustomId("search")
			.setLabel('–ù–∞–π—Ç–∏ –º–∞—Ä—à—Ä—É—Ç')
			.setStyle(Discord.ButtonStyle.Secondary)
			.setDisabled(false)
	);
	
	// –¥–µ–ª–∞–µ–º –≤—ã–∫–ª—é—á–µ–Ω–Ω—ã–µ –∫–Ω–æ–ø–∫–∏
	const rowAfter = new Discord.ActionRowBuilder().addComponents(
		new Discord.ButtonBuilder()
			.setCustomId("label")
			.setLabel('–ü–æ –±–æ—Ä—Ç. –Ω–æ–º–µ—Ä—É')
			.setStyle(Discord.ButtonStyle.Primary)
			.setDisabled(true),
		new Discord.ButtonBuilder()
			.setCustomId("route")
			.setLabel('–ü–æ –Ω–æ–º–µ—Ä—É –º–∞—Ä—à—Ä—É—Ç–∞')
			.setStyle(Discord.ButtonStyle.Primary)
			.setDisabled(true),
		new Discord.ButtonBuilder()
			.setCustomId("search")
			.setLabel('–ù–∞–π—Ç–∏ –º–∞—Ä—à—Ä—É—Ç')
			.setStyle(Discord.ButtonStyle.Secondary)
			.setDisabled(true)
	);
	
	// –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
	let embed = new Discord.EmbedBuilder()
		.setTitle('–ü–æ–∏—Å–∫ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞ –≤ –°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥–µ')
		.setColor(nek.config.basecolor)
		.setDescription('–í—ã –º–æ–∂–µ—Ç–µ –Ω–∞–π—Ç–∏ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç –ø–æ –±–æ—Ä—Ç–æ–≤–æ–º—É/–ø–∞—Ä–∫–æ–≤–æ–º—É –Ω–æ–º–µ—Ä—É, –ø–æ –Ω–æ–º–µ—Ä—É –º–∞—Ä—à—Ä—É—Ç–∞. –í—ã –º–æ–∂–µ—Ç–µ –Ω–∞–π—Ç–∏ –Ω–æ–º–µ—Ä –º–∞—Ä—à—Ä—É—Ç–∞, –µ—Å–ª–∏ –Ω–µ —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ –æ–Ω —Å—É—â–µ—Å—Ç–≤—É–µ—Ç')
		.setFooter({text: '–ï—Å–ª–∏ –≤—ã –Ω–µ —Ö–æ—Ç–∏—Ç–µ –∫–∞–∂–¥—ã–π —Ä–∞–∑ –Ω–∞–∂–∏–º–∞—Ç—å –∫–Ω–æ–ø–∫–∏ –∏ –∑–∞–ø–æ–ª–Ω—è—Ç—å –æ–ø—Ä–æ—Å–Ω–∏–∫, —Ç–æ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ç–µ–∫—Å—Ç–æ–≤—ã–µ –∞—Ä–≥—É–º–µ–Ω—Ç—ã (' + nek.config.prefix + ' orgp --help)'});
	const response = await msg.reply({
		embeds: [embed], // –≤–∫–ª–∞–¥—ã–≤–∞–µ–º embed
		components: [rowBefore] // –≤–∫–ª–∞–¥—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫–∏
	});
	
	const collectorFilter = i => i.user.id === msg.author.id; // –∑–∞–¥–∞–µ–º —Ñ–∏–ª—å—Ç—Ä, —á—Ç–æ –±—ã –≤–æ—Å–ø—Ä–∏–Ω–∏–º–∞—Ç—å –Ω–∞–∂–∞—Ç–∏—è —Ç–æ–ª—å–∫–æ –æ—Ç –∏–∑–Ω–∞—á–∞–ª—å–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
	try {
		const buttonConfirmation = await response.awaitMessageComponent({ filter: collectorFilter, time: 60000 }); // –æ–∂–∏–¥–∞–µ–º –æ—Ç–≤–µ—Ç–∞ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Ç–µ—á–µ–Ω–∏–µ 60—Å
		
		// –≤—ã–∫–ª—é—á–∞–µ–º –∫–Ω–æ–ø–∫–∏ —Ç.–∫. –ø–æ–≤—Ç–æ—Ä–Ω–æ–µ –∏—Ö –Ω–∞–∂–∞—Ç–∏–µ –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–µ—Ç
		embed.setFooter({text: '–ö–Ω–æ–ø–∫–∞ –±—ã–ª–∞ –Ω–∞–∂–∞—Ç–∞. –î–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –ø–æ–ø—ã—Ç–∫–∏ –∑–∞–Ω–æ–≤–æ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ'})
		await response.edit({ 
			embeds: [embed], // –≤–∫–ª–∞–¥—ã–≤–∞–µ–º embed
			components: [rowAfter] // –≤–∫–ª–∞–¥—ã–≤–∞–µ–º –≤—ã–∫–ª—é—á–µ–Ω–Ω—ã–µ –∫–Ω–æ–ø–∫–∏
		});
		
		// –ó–∞–¥–∞—ë–º –ø–æ—è—Å–Ω—è—é—â–∏–µ —Å—Ç—Ä–æ–∫–∏ –≤ –æ–ø—Ä–æ—Å–Ω–∏–∫–µ
		let modalTitle = "–†–µ–∂–∏–º " + buttonConfirmation.customId; // fallback –∑–∞–≥–æ–ª–æ–≤–æ–∫ –æ–ø—Ä–æ—Å–Ω–∏–∫–∞
		let modalArbLabel = "–ù–æ–º–µ—Ä"; // fallback –Ω–∞–∑–≤–∞–Ω–∏–µ –ø–æ–ª—è —Å –ø—Ä–æ–∏–∑–≤–æ–ª—å–Ω—ã–º –∞—Ä–≥—É–º–µ–Ω—Ç–æ–º
		let typeRequired = false;
		if (buttonConfirmation.customId === 'label') { // –µ—Å–ª–∏ —Ä–µ–∂–∏–º –ø–æ–∏—Å–∫–∞ –ø–æ –±–æ—Ä—Ç–æ–≤–æ–º—É –Ω–æ–º–µ—Ä—É
			modalTitle = "–ü–æ–∏—Å–∫ –ø–æ –±–æ—Ä—Ç–æ–≤–æ–º—É/–ø–∞—Ä–∫–æ–≤–æ–º—É –Ω–æ–º–µ—Ä—É";
			modalArbLabel = "–ë–æ—Ä—Ç–æ–≤–æ–π –Ω–æ–º–µ—Ä";
		} else if (buttonConfirmation.customId === 'route') { // –µ—Å–ª–∏ —Ä–µ–∂–∏–º –ø–æ–∏—Å–∫–∞ –ø–æ –º–∞—Ä—à—Ä—É—Ç—É
			modalTitle = "–ü–æ–∏—Å–∫ –ø–æ –Ω–æ–º–µ—Ä—É –º–∞—Ä—à—Ä—É—Ç–∞";
			modalArbLabel = "–ù–æ–º–µ—Ä –º–∞—Ä—à—Ä—É—Ç–∞";
			typeRequired = true;
		} else if (buttonConfirmation.customId === 'search') { // –µ—Å–ª–∏ —Ä–µ–∂–∏–º –ø–æ–∏—Å–∫–∞ –º–∞—Ä—à—Ä—É—Ç–∞
			modalTitle = "–ü–æ–∏—Å–∫ –º–∞—Ä—à—Ä—É—Ç–∞";
			modalArbLabel = "–ù–æ–º–µ—Ä –º–∞—Ä—à—Ä—É—Ç–∞";
		}
		const modal = new Discord.ModalBuilder() // —Å–æ–∑–¥–∞—ë–º –æ–ø—Ä–æ—Å–Ω–∏–∫
			.setCustomId(buttonConfirmation.customId) // –∑–∞–¥–∞—ë–º id –æ–ø—Ä–æ—Å–Ω–∏–∫–∞, –æ–Ω –∂–µ workMode
			.setTitle(modalTitle) // –∑–∞–¥–∞—ë–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ –æ–ø—Ä–æ—Å–Ω–∏–∫–∞
			.addComponents( // –¥–æ–±–∞–≤–ª—è–µ–º –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
				new Discord.ActionRowBuilder().addComponents( // —Å–æ–∑–¥–∞–µ–º –∫–æ–º–ø–æ–Ω–µ–Ω—Ç
					new Discord.TextInputBuilder() // –¥–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª–µ –≤–≤–æ–¥–∞ –≤ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç
						.setCustomId('arb')
						.setLabel(modalArbLabel)
						.setStyle(Discord.TextInputStyle.Short)
						.setRequired(true)
				),
				new Discord.ActionRowBuilder().addComponents( // —Å–æ–∑–¥–∞–µ–º –∫–æ–º–ø–æ–Ω–µ–Ω—Ç
					new Discord.TextInputBuilder() // –¥–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª–µ –≤–≤–æ–¥–∞ –≤ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç
						.setCustomId('type')
						.setLabel("–¢–∏–ø —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞")
						.setPlaceholder('—Ç—Ä–æ–ª–ª–µ–π–±—É—Å (—Ç—Ä–æ...), –∞–≤—Ç–æ–±—É—Å (–∞–≤...), —Ç—Ä–∞–º–≤–∞–π (—Ç—Ä–∞...)')
						.setStyle(Discord.TextInputStyle.Short)
						.setRequired(typeRequired)
				)
			);
		modalResponse = await buttonConfirmation.showModal(modal); // –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–ø—Ä–æ—Å–Ω–∏–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
		try {
			const modalConfirmation = await buttonConfirmation.awaitModalSubmit({ filter: collectorFilter, time: 60000 }); // –æ–∂–∏–¥–∞–µ–º –æ—Ç–≤–µ—Ç–∞ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Ç–µ—á–µ–Ω–∏–µ 60—Å
			
			await modalConfirmation.deferUpdate(); // –≥–æ–≤–æ—Ä–∏–º –¥–∏—Å–∫–æ—Ä–¥—É, —á—Ç–æ –∑–∞–ø—Ä–æ—Å –±—ã–ª –æ–±—Ä–∞–±–æ—Ç–∞–Ω
			await response.delete(); // —É–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
			
			return [ // –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Ç–∞–∫–æ–π –º–∞—Å—Å–∏–≤ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤, –±—É–¥—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–≤—ë–ª
				buttonConfirmation.customId,
				modalConfirmation.fields.getTextInputValue('type'),
				modalConfirmation.fields.getTextInputValue('arb')
			];
		} catch (e) {
			embed.setFooter({text: '–í—ã –Ω–µ –∑–∞–ø–æ–ª–Ω–∏–ª–∏ –æ–ø—Ä–æ—Å–Ω–∏–∫ –≤ —Ç–µ—á–µ–Ω–∏–µ –º–∏–Ω—É—Ç—ã. –ó–∞–ø—Ä–æ—Å –æ—Ç–º–µ–Ω—ë–Ω'})
			await response.edit({
				embeds: [embed], // –≤–∫–ª–∞–¥—ã–≤–∞–µ–º embed
				components: [rowAfter] // –≤–∫–ª–∞–¥—ã–≤–∞–µ–º –≤—ã–∫–ª—é—á–µ–Ω–Ω—ã–µ –∫–Ω–æ–ø–∫–∏
			});
			return false;
		}
	} catch (e) {
		embed.setFooter({text: '–í—ã –Ω–µ –Ω–∞–∂–∞–ª–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É –≤ —Ç–µ—á–µ–Ω–∏–µ –º–∏–Ω—É—Ç—ã. –ó–∞–ø—Ä–æ—Å –æ—Ç–º–µ–Ω—ë–Ω'})
		await response.edit({
			embeds: [embed], // –≤–∫–ª–∞–¥—ã–≤–∞–µ–º embed
			components: [rowAfter] // –≤–∫–ª–∞–¥—ã–≤–∞–µ–º –≤—ã–∫–ª—é—á–µ–Ω–Ω—ã–µ –∫–Ω–æ–ø–∫–∏
		});
		return false;
	}
}
argsProcess.cli = async (args) => { // –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤
	let argsObject = {};
	argsObject.transportType = false;
	argsObject.workMode = false;
	argsObject.arbArg = false;
	
	for await (const arg of args) {
		// —Ç–∏–ø —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞ (transport type)
		if (arg.toLowerCase().startsWith('—Ç—Ä–æ') || arg.toLowerCase().startsWith('nhj')) { // —Ç—Ä–æ–ª–ª–µ–π–±—É—Å
			argsObject.transType = "trolley";
		} else if (arg.toLowerCase().startsWith('–∞–≤') || arg.toLowerCase().startsWith('fd')) { // –∞–≤—Ç–æ–±—É—Å
			argsObject.transType = "bus";
		} else if (arg.toLowerCase().startsWith('—Ç—Ä–∞') || arg.toLowerCase().startsWith('nhf')) { // —Ç—Ä–∞–º–≤–∞–π
			argsObject.transType = "tram";
			
		// —Ä–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã (work mode)
		} else if (arg.toLowerCase().startsWith('–º') || arg == "route") {
			argsObject.workMode = "byRoute";
		} else if (arg.toLowerCase().startsWith('–Ω') || arg == "label") {
			argsObject.workMode = "byLabel";
		} else if (arg.toLowerCase().startsWith('–ø') || arg == "search") {
			argsObject.workMode = "searchRoute";
			
		// –ª—é–±–æ–π –∏–Ω–æ–π –ø—Ä–æ–∏–∑–≤–æ–ª—å–Ω—ã–π –∞—Ä–≥—É–º–µ–Ω—Ç (arbitrary argument)
		} else {
			argsObject.arbArg = arg.toLowerCase();
		}
	}
	return argsObject;
}

// == –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö –∫–æ–º–∞–Ω–¥
let msgProcess = {};
msgProcess.searchByRouteOrLabel = async (nek, msg, number, transType, searchType) => { // –ø–æ–∏—Å–∫ –ø–æ –Ω–æ–º–µ—Ä—É –º–∞—Ä—à—Ä—É—Ç–∞
	if (!number) {
		let embed = new Discord.EmbedBuilder()
			.setTitle("–ù–µ —É–∫–∞–∑–∞–Ω –º–∞—Ä—à—Ä—É—Ç")
			.setColor(nek.config.errorcolor);
		await msg.reply({ embeds: [embed] }); // –∑–∞–ø–æ–º–∏–Ω–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
		return;
	}
	if (!transType) {
		let embed = new Discord.EmbedBuilder()
			.setTitle("–ù–µ —É–∫–∞–∑–∞–Ω —Ç–∏–ø —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞")
			.setColor(nek.config.errorcolor);
		await msg.reply({ embeds: [embed] }); // –∑–∞–ø–æ–º–∏–Ω–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
		return;
	}
	const transports = await sillyProcess.getTransportFull(nek, transType, msg);
	const waitmsg = transports.message;
	let labels = [];
	let publicOut = []; // –±–æ—Ä—Ç–æ–≤—ã–µ –Ω–æ–º–µ—Ä–∞
	if (searchType === "route") {
		for await (const trans of transports.transports) { // —á–µ–∫–∞–µ–º –≤—Å–µ –º–∞—Ä—à—Ä—É—Ç—ã
			if (trans.RouteShortName.toLowerCase() === number) { // –µ—Å–ª–∏ —ç—Ç–æ –º–∞—Ä—à—Ä—É—Ç, –∫–æ—Ç–æ—Ä—ã–π –±—ã–ª —É–∫–∞–∑–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
				labels.push(trans.VehicleLabel); // –∑–∞–ø–∏—Å–∞—Ç—å —á–∏—Å—Ç–æ –Ω–æ–º–µ—Ä–∞ –º–∞—Ä—à—Ä—É—Ç–æ–≤ (–Ω–∞–¥–æ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è customId –∫–Ω–æ–ø–∫–∏)
				publicOut.push("‚Ññ" + trans.VehicleLabel + "\n"); // –∑–∞–ø–∏—Å–∞—Ç—å –≤–∏–¥–∏–º—ã–µ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–∞–Ω–Ω—ã–µ
			}
		}
	} else if (searchType === "label") {
		for await (const trans of transports.transports) { // —á–µ–∫–∞–µ–º –≤—Å–µ –º–∞—Ä—à—Ä—É—Ç—ã
			if (trans.VehicleLabel === number) { // –µ—Å–ª–∏ —ç—Ç–æ –º–∞—Ä—à—Ä—É—Ç, –∫–æ—Ç–æ—Ä—ã–π –±—ã–ª —É–∫–∞–∑–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
				labels.push(trans.VehicleLabel); // –∑–∞–ø–∏—Å–∞—Ç—å —á–∏—Å—Ç–æ –±–æ—Ä—Ç–æ–≤—ã–µ –Ω–æ–º–µ—Ä–∞ (–Ω–∞–¥–æ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è customId –∫–Ω–æ–ø–∫–∏)
				publicOut.push("‚Ññ" + trans.VehicleLabel + " / –º–∞—Ä—à—Ä—É—Ç " + trans.RouteShortName + "\n"); // –∑–∞–ø–∏—Å–∞—Ç—å –≤–∏–¥–∏–º—ã–µ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–∞–Ω–Ω—ã–µ
			}
		}
	}
	
	// —Å–æ—Ä—Ç–∏—Ä—É–µ–º
	labels.sort();
	publicOut.sort();
	
	if (!labels[0]) { // –µ—Å–ª–∏ –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞—à–ª–∏
		let embed = new Discord.EmbedBuilder()
			.setTitle("–ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
			.setColor(nek.config.errorcolor);
		await waitmsg.edit({ embeds: [embed] });
		return;
	}
	
	if (labels.length === 1) { // –µ—Å–ª–∏ –Ω–∞–π–¥–µ–Ω –≤—Å–µ–≥–æ –æ–¥–∏–Ω —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç, —Ç–æ —Å—Ä–∞–∑—É —Ä–∏—Å—É–µ–º –∫–∞—Ä—Ç—É
		let embed = new Discord.EmbedBuilder()
			.setTitle("‚Ññ" + labels[0] + " - –ú–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ")
			.setColor(nek.config.basecolor)
			.setDescription("–ù–∞–π–¥–µ–Ω–∞ —Ç–æ–ª—å–∫–æ –æ–¥–Ω–∞ –º–∞—à–∏–Ω–∞. –ó–∞–≥—Ä—É–∑–∫–∞ –∫–∞—Ä—Ç—ã...");
		await waitmsg.edit({ embeds: [embed] });
		showMap(nek, {
			zoom: 15,
			label: labels[0],
			authorId: msg.author.id,
			transportType: transType,
			message: waitmsg
		});
		return;
	}

	let embed = new Discord.EmbedBuilder()
		.setColor(nek.config.basecolor)
		.setDescription("–ù–∞–π–¥–µ–Ω–æ " + labels.length + " (" + readableType[transType] + "):\n" + publicOut.join(""));
		
	const preId = msg.author.id + "_0_neworgp_" + transType + "_";
	
	// —Å–ø–∏—Å–æ–∫
	let selectList;
	if (labels.length <= 25) { // –µ—Å–ª–∏ –º—ã –ø—Ä–æ—Ö–æ–¥–∏–º –≤ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –¥–∏—Å–∫–æ—Ä–¥–∞
		selectList = new Discord.StringSelectMenuBuilder()
			.setCustomId(preId + "map_15")
			.setPlaceholder('–ü–æ–ª—É—á–∏—Ç—å –±–æ–ª—å—à–µ –∏–Ω—Ñ—ã –æ...')
			.setDisabled(false);
		await labels.forEach((label) => {
			selectList.addOptions({
				label: label,
				value: label
			});
		});
	} else {
		selectList = new Discord.StringSelectMenuBuilder()
			.setCustomId(preId + "map_15")
			.setPlaceholder('–ü–æ–ª—É—á–∏—Ç—å –±–æ–ª—å—à–µ –∏–Ω—Ñ—ã –æ...')
			.setDisabled(true)
			.addOptions({
				label: "1234",
				value: "1234"
			});
	}
	const listRow = new Discord.ActionRowBuilder().addComponents(selectList);
	await waitmsg.edit({ embeds: [embed], components: [listRow] });
	return;
	
}
msgProcess.searchRouteName = async (nek, msg, approxName, transType) => { // –ü–æ–∏—Å–∫ –º–∞—Ä—à—Ä—É—Ç–∞
	if (!approxName) {
		let embed = new Discord.EmbedBuilder()
			.setTitle('–£–∫–∞–∂–∏—Ç–µ –º–∞—Ä—à—Ä—É—Ç')
			.setColor(nek.config.errorcolor);
		await msg.reply({ embeds: [embed] }); // –∑–∞–ø–æ–º–∏–Ω–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
		return;
	}
	const loadingString = sillyProcess.getLoadingString();
	let embed = new Discord.EmbedBuilder()
		.setTitle('–ü–æ–∏—Å–∫ –º–∞—Ä—à—Ä—É—Ç–∞')
		.setColor(nek.config.basecolor)
		.setDescription(loadingString);
	const waitmsg = await msg.reply({ embeds: [embed] }); // –∑–∞–ø–æ–º–∏–Ω–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
	
	let searchResults = await webProcess.searchRoute(approxName, transType, 0);
	if (!searchResults || !searchResults[0]) {
		let embed = new Discord.EmbedBuilder()
			.setTitle("–ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
			.setColor(nek.config.errorcolor);
		await waitmsg.edit({ embeds: [embed] }); // –∑–∞–ø–æ–º–∏–Ω–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
		return;
	}
	
	let totalFound = searchResults.length;
	if (searchResults.length === 20) {
		const anotherSearchResults = await webProcess.searchRoute(approxName, transType, 20); // –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –ø–µ—Ä–≤—ã–µ 20 –º–∞—Ä—à—Ä—É—Ç–æ–≤, —Ç.–∫. –º—ã –∏—Ö –Ω–∞—à–ª–∏ –≤—ã—à–µ, –∏ –∏—â–µ–º –µ—â—ë
		searchResults = [...searchResults, ...anotherSearchResults];
		if (searchResults.length === 40) {
			totalFound = "40 –∏–ª–∏ –±–æ–ª–µ–µ";
		} else {
			totalFound = searchResults.length;
		}
	}
	let routesList = "```\n";
	for await (const route of searchResults) {
		routesList += route.ShortName + " - " + readableType[route.TransportType] + "\n";
	}
	routesList += "```";
	if (!transType) {
		transType = "–ª—é–±–æ–π";
	} else {
		transType = readableType[transType];
	}
	embed = new Discord.EmbedBuilder()
		.setTitle('–ü–æ–∏—Å–∫ –º–∞—Ä—à—Ä—É—Ç–∞')
		.setColor(nek.config.basecolor)
		.setDescription("–ü–æ –∑–∞–ø—Ä–æ—Å—É `" + approxName + "` —Å—Ä–µ–¥–∏ —Ç–∏–ø–∞ `" + transType + "` –±—ã–ª–æ –Ω–∞–π–¥–µ–Ω–æ `" + totalFound + "` –º–∞—Ä—à—Ä—É—Ç–æ–≤:\n" + routesList +
		'\n–°–æ–≤–µ—Ç—É–µ–º –¥–ª—è –ø–æ–∏—Å–∫–∞ –≤–æ—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—Å—è [–æ—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–º —Å–∞–π—Ç–æ–º](https://transport.orgp.spb.ru/routes)')
	await waitmsg.edit({ embeds: [embed] });
	return;
}

// == –û–±—â–µ–Ω–∏–µ —Å —Å–∞–π—Ç–æ–º
let webProcess = {};
webProcess.createPayload = (values) => { // —Å–æ–∑–¥–∞—Ç—å —Å–∞–π—Ç—É –æ—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∑–∞–ø—Ä–æ—Å. –ù–∞ –≤—Ö–æ–¥ –æ–±—ä–µ–∫—Ç —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–º (–Ω–∞–ø—Ä–∏–º–µ—Ä {skip: 0, take: 20})
	// –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ä–∞–∑–¥–µ–ª—è—Ç–æ—Ä
	let webkit = '----WebKitFormBoundary';
	for (let i = 0; i < 16; i++) {
		webkit += 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789'.charAt(Math.floor(Math.random() * 62)); // –±–µ—Ä—ë–º —Ä–∞–Ω–¥–æ–º —Å–∏–º–≤–æ–ª –∏ –ø–∏—Ö–∞–µ–º
	}

	// –¥–µ–ª–∞–µ–º —Ç–µ–ª–æ
	let outputBody = ""; // duh
	for (var [key, value] of Object.entries(values)) { // –ø–µ—Ä–µ–±–µ—Ä–∞–µ–º –æ–±—ä–µ–∫—Ç —Å –¥–∞–Ω–Ω—ã–º–∏
		outputBody += "--" + webkit + "\r\n"; // –ø–∏—à–µ–º —Ä–∞–∑–¥–µ–ª—è—Ç–æ—Ä
		outputBody += "Content-Disposition: form-data; name=\"" + key + "\"\r\n"; // –ø–∏—à–µ–º —Ç–∏–ø –¥–∞–Ω–Ω—ã—Ö –∏ –∏—Ö –Ω–∞–∑–≤–∞–Ω–∏–µ, —Å–∫–∏–ø —Å—Ç—Ä–æ–∫–∏
		outputBody += "\r\n"; // —Å–∫–∏–ø–∞–µ–º —Å—Ç—Ä–æ–∫—É –ø–æ—Ç–æ–º—É —á—Ç–æ bruh
		outputBody += value + "\r\n"; // –ø–∏—à–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –∏ —Å–∫–∏–ø–∞–µ–º —Å—Ç—Ä–æ–∫—É
	}
	outputBody += "--" + webkit + "--"; // –ø–∏—à–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—ã–π —Ä–∞–∑–¥–µ–ª—è—Ç–æ—Ä
	const encoder = new TextEncoder();  // —Å–æ–∑–¥–∞–µ–º —ç–Ω–∫–æ–¥–µ—Ä, —á—Ç–æ –±—ã —Å–∞–π—Ç –ø–æ–Ω—è–ª —Ä—É—Å—Å–∫–∏–µ —Å–∏–º–≤–æ–ª—ã
	return {boundary: webkit, body: encoder.encode(outputBody)}; // –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Ä–∞–∑–¥–µ–ª—è—Ç–æ—Ä –∏ —ç–Ω–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
}
webProcess.searchRoute = async (name, type, skip = 0) => { // –Ω–∞–π—Ç–∏ –º–∞—Ä—à—Ä—É—Ç –ø–æ –Ω–æ–º–µ—Ä—É –º–∞—Ä—à—Ä—É—Ç–∞
	let payload;
	if (type) { // –µ—Å–ª–∏ –¥–∞–Ω —Ç–∏–ø —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞
		payload = webProcess.createPayload({skip: skip, take: 20, transportTypes: type, routeShortName: name}); // –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º payload
	} else {
		payload = webProcess.createPayload({skip: skip, take: 20, routeShortName: name}); // –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º payload
	}
	//console.log(payload.body)
	const options = { // –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –æ–±—Ä–∞—â–µ–Ω–∏—è –∫ —Å–µ—Ä–≤–∞–∫—É
	  hostname: 'nts-admin.orgp.spb.ru',
	  port: 443,
	  path: '/api/visary/operator/route',
	  method: 'POST',
	  headers: {
		"content-type": "multipart/form-data; boundary=" + payload.boundary,
		'Content-Length': payload.body.length
	  },
	  ca: ca
	}
	return new Promise((resolve, reject) => { // –∂–¥–µ–º –ø–æ–∫–∞ –ø–æ–ª—É—á–∏–º –æ—Ç–≤–µ—Ç –æ—Ç —Å–∞–π—Ç–∞
		const req = https.request(options, (res) => { // –æ–±—Ä–∞—â–∞–µ–º—Å—è –∫ —Å–µ—Ä–≤–∞–∫—É
			let data = "";
			res.on('data', (d) => {
				//console.log('got data');
				data = data + d;
			});
			res.on('end', () => {
				//console.log(data);
				try {
					const resp = JSON.parse(data);
					if (!resp.Error) {
						resolve(resp);
					} else {
						resolve(false);
					}
				} catch(e) {
					console.error(e);
					resolve(false);
				}
			});
		});
		req.on('error', (e) => {
			reject(e);
		});
		req.write(payload.body); // –ø–∏—à–µ–º –¥–∞–Ω–Ω—ã–µ –≤ —Å–∞–π—Ç
		req.end();
	})
}
webProcess.getTransport = async (type, bbox) => { // –Ω–∞–π—Ç–∏ —Ç—Ä–∞–Ω–ø–æ—Ä—Ç –≤ –ø—Ä–µ–¥–µ–ª–∞—Ö bbox
	let transport = ''
	if (type) {
		transport = 'transport=' + type + '&';
	}
	const options = { // –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –æ–±—Ä–∞—â–µ–Ω–∏—è –∫ —Å–µ—Ä–≤–∞–∫—É
		hostname: 'nts-admin.orgp.spb.ru',
		port: 443,
		path: '/api/visary/geometry/vehicle?' + transport + 'bbox=' + bbox,
		method: 'GET',
		headers: {},
		ca: ca
	}
	return new Promise((resolve, reject) => { // –∂–¥–µ–º –ø–æ–∫–∞ –ø–æ–ª—É—á–∏–º –æ—Ç–≤–µ—Ç –æ—Ç —Å–∞–π—Ç–∞
		const req = https.request(options, (res) => { // –æ–±—Ä–∞—â–∞–µ–º—Å—è –∫ —Å–µ—Ä–≤–∞–∫—É
			let data = "";
			res.on('data', (d) => {
				data = data + d;
			});
			res.on('end', () => {
				try {
					const resp = JSON.parse(data);
					if (!resp.Error) {
						resolve(resp);
					} else {
						resolve(false);
					}
				} catch(e) {
					console.error(e);
					resolve(false);
				}
			});
		});
		req.on('error', (e) => {
			reject(e);
		});
		req.end();
	})
}

showMap = async (nek, parameters) => {
	const preId = parameters.authorId + "_0_neworgp_" + parameters.transportType + "_MAP_"
	
	const update = new Discord.ButtonBuilder()
		.setCustomId(preId + parameters.zoom)
		.setLabel('–û–±–Ω–æ–≤–∏—Ç—å')
		.setStyle(Discord.ButtonStyle.Success)
		.setDisabled(false);
	const zoomOut = new Discord.ButtonBuilder()
		.setCustomId(preId + (parameters.zoom - 1))
		.setLabel('üîé -')
		.setStyle(Discord.ButtonStyle.Secondary)
		.setDisabled(false);
	const zoomCurrent = new Discord.ButtonBuilder()
		.setCustomId('currentZoom')
		.setLabel('üîé ' + parameters.zoom)
		.setStyle(Discord.ButtonStyle.Secondary)
		.setDisabled(true);
	const zoomIn = new Discord.ButtonBuilder()
		.setCustomId(preId + (parameters.zoom + 1))
		.setLabel('üîé +')
		.setStyle(Discord.ButtonStyle.Secondary)
		.setDisabled(false);
	let buttonsRow = new Discord.ActionRowBuilder().addComponents(update, zoomOut, zoomCurrent, zoomIn);
	let components;
	if (parameters.list) {
		components = [parameters.list, buttonsRow];
	} else {
		components = [buttonsRow];
	}
	
	const transports = await sillyProcess.getTransportFull(nek, parameters.type, false); // –∏—â–µ–º –ø–æ –≤—Å–µ–º—É –ø–∏—Ç–µ—Ä—É
	
	const map = new StaticMaps({
		width: 512,
		height: 512,
		tileUrl: 'https://tile.openstreetmap.org/{z}/{x}/{y}.png'
	});
	const drawCar = (map, trans) => { // –¥–æ–±–∞–≤–ª—è–µ–º –º–∞—à–∏–Ω—É –Ω–∞ –∫–∞—Ä—Ç—É (–º–∞—Ä–∫–µ—Ä –Ω—É–∂–Ω–æ–≥–æ —Ü–≤–µ—Ç–∞ + –Ω–æ–º–µ—Ä –º–∞—Ä—à—Ä—É—Ç–∞ + –±–æ—Ä—Ç–æ–≤–æ–π –Ω–æ–º–µ—Ä
		let directionRounded = Math.ceil(trans.Direction / 15) * 15; // –æ–∫—Ä—É–≥–ª—è–µ–º –≥—Ä–∞–¥—É—Å—ã –ø–æ 15
		if (directionRounded >= 360) directionRounded = 0;

		const markerPath = "./src/assets/orgp/markers/" + trans.TransportType + "_" + directionRounded + ".png"; // –ø—É—Ç—å –¥–æ –∫—Ä—É–∂–∫–∞
		map.addMarker({ // –¥–æ–±–∞–≤–ª—è–µ–º –∫—Ä—É–∂–æ–∫
			img: markerPath,
			offsetX: 32,
			offsetY: 32,
			width: 64,
			height: 64,
			coord : [trans.Location.Longitude, trans.Location.Latitude]
		});
		
		// const vehicleIconPath = "./src/assets/orgp/icons/" + trans.TransportType + "_small.png"; // –ø—É—Ç—å –¥–æ –ø–∏–∫—Ç–æ–≥—Ä–∞–º–º—ã —Ç–∏–ø–∞ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞.
		// map.addMarker({ // –¥–æ–±–∞–≤–ª—è–µ–º –ø–∏–∫—Ç–æ–≥—Ä–∞–º–º—É —Ç–∏–ø–∞ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞
			// img: vehicleIconPath,
			// offsetX: 32,
			// offsetY: 32,
			// width: 64,
			// height: 64,
			// coord : [trans.Location.Longitude, trans.Location.Latitude]
		// });
		
		map.addText({ // –¥–æ–±–∞–≤–ª—è–µ–º –±–æ—Ä—Ç–æ–≤–æ–π –Ω–æ–º–µ—Ä
			text: trans.VehicleLabel,
			size: 16,
			width: 1,
			fill: '#ffffff',
			color: '#000000',
			font: 'Impact',
			anchor: 'middle',
			offsetY: 2,
			coord : [trans.Location.Longitude, trans.Location.Latitude]
		});
		
		map.addText({ // –¥–æ–±–∞–≤–ª—è–µ–º –Ω–æ–º–µ—Ä –º–∞—Ä—à—Ä—É—Ç–∞
			text: trans.RouteShortName,
			size: 16,
			width: 1,
			fill: '#eeeeee',
			color: '#000000',
			font: 'Impact',
			anchor: 'middle',
			offsetY: -15,
			coord : [trans.Location.Longitude, trans.Location.Latitude]
		});
		
	}
	let car = false;
	for await (const trans of transports.transports) { // —á–µ–∫–∞–µ–º –≤—Å–µ –º–∞—Ä—à—Ä—É—Ç—ã
		if (trans.VehicleLabel === parameters.label) {
			car = trans;
		}
	}
	if (!car) {
		let embed = new Discord.EmbedBuilder()
			.setTitle("‚Ññ" + parameters.label + " - –ú–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ")
			.setColor(nek.config.errorcolor)
			.setDescription("–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –º–∞—à–∏–Ω—É. –í–æ–∑–º–æ–∂–Ω–æ –æ–Ω–∞ —É–∂–µ –Ω–µ –Ω–∞ –º–∞—Ä—à—Ä—É—Ç–µ");
		await parameters.message.edit({files: [], embeds: [embed], components: components});
		return;
	}
	drawCar(map, car); // —Ä–∏—Å—É–µ–º –∏—Å–∫–æ–º—É—é –º–∞—à–∏–Ω—É –≤ –ø–æ—Å–ª–µ–¥–Ω—é—é –æ—á–µ—Ä–µ–¥—å, —á—Ç–æ –±—ã –æ–Ω–∞ –±—ã–ª–∞ –≤—ã—à–µ –≤—Å–µ—Ö
	await map.render([car.Location.Longitude, car.Location.Latitude], parameters.zoom); // —Ä–µ–Ω–¥–µ—Ä–∏–º –∫–∞—Ä—Ç—É
	const mapBuffer = await map.image.buffer('image/png'); // —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –±—É—Ñ–µ—Ä
	const updateTime = new Date(car.DateTime.replace(/Z/g, '+03:00'));
	
	let embed = new Discord.EmbedBuilder()
		.setTitle("‚Ññ" + parameters.label + " - –ú–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ")
		.setColor(nek.config.basecolor)
		.setDescription("–ü–æ—Å–ª–µ–¥–Ω–∏–π —Ä–∞–∑ –≤–∏–¥–µ–ª–∏ <t:" + (updateTime.getTime() / 1000) + ":R>")
		.setImage('attachment://' + car.VehicleLabel + '.png');
	const mapAttachment = new Discord.AttachmentBuilder(mapBuffer, { name: car.VehicleLabel + '.png' });
	await parameters.message.edit({files: [mapAttachment], embeds: [embed], components: components});
	return;		
}

// == –î—Ä—É–≥–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏
let sillyProcess = {};
sillyProcess.getLoadingString = () => {
	const funnyLoadingStrings = [ // –≤—Å—è–∫–∏–µ —Å–º–µ—à–Ω—è–≤–∫–∏ –≤ –º–æ–º–µ–Ω—Ç –æ–±—Ä–∞—â–µ–Ω–∏—è –∫ —Å–µ—Ä–≤–µ—Ä—É
		// –û—Å–Ω–æ–≤–Ω–æ–π
		"–ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö...",
		
		// –í–Ω—è—Ç–Ω–æ
		"–ü–æ–¥–æ–∂–¥–∏—Ç–µ...",
		"–ó–∞–≥—Ä—É–∑–∫–∞...",
		"–ó–∞–≥—Ä—É–∂–∞–µ–º...",
		"–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ...",
		"–ü–æ–¥–∫–ª—é—á–∞—é—Å—å...",
		"–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ —Å–µ—Ä–≤–µ—Ä—É...",
		"–ó–∞–ø—É—Å–∫–∞–µ–º...",
		"–ó–∞–ø—É—Å–∫–∞—é—Å—å...",
		
		// –°–ª–∏—à–∫–æ–º –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω–æ
		"–ü–æ–¥–æ–∂–¥–∏—Ç–µ, –æ–ø–µ—Ä–∞—Ü–∏—è –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è...",
		"–û–∂–∏–¥–∞–π—Ç–µ...",
		"–°–µ–π—á–∞—Å, –ø–æ–≥–æ–¥–∏—Ç–µ...",
		"–û–¥–∏–Ω –º–æ–º–µ–Ω—Ç...",
		"–ú–∏–Ω—É—Ç–∫—É...",
		"Loading...",
		
		// bruh, –Ω–æ —Ö–æ—Ç—è –±—ã –ø–æ–Ω—è—Ç–Ω–æ, —á—Ç–æ –∏–¥—ë—Ç –∑–∞–≥—Ä—É–∑–∫–∞
		"–í—Ç—ã–∫–∞–µ–º...",
		"–∞–≥–¥–µ? –ê, —â–∞...",
		"–ï—Å—Ç—å –ª–∏ —É –ø–∏–Ω–≥–≤–∏–Ω–æ–≤ –∫–æ–ª–µ–Ω–∏... —Ö–º. –ê, –Ω—É –¥–∞, –ø–∏—Ç–µ—Ä. –©–∞...",
		"–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è. —à—É—Ç–∫–∞, —â–∞...",
		"–©–∞ –∑–∞–π–¥—É, –ø–æ—Å–º–æ—Ç—Ä—é, —á–µ —Ç–∞–º –ø–ª–∞–≤–∞–µ—Ç –≤ –ø–∏—Ç–µ—Ä–µ...",
		"–í–Ω–∏–º–∞–Ω–∏–µ! –î–ª—è —Ä–∞–±–æ—Ç—ã –∫–æ–º–∞–Ω–¥—ã –Ω—É–∂–Ω–æ –∑–∞–ø–ª–∞—Ç–∏—Ç—å 9.99$. –•–∞, –Ω–µ—Ç. –ü—Ä–æ—Å—Ç–æ –ø–æ–¥–æ–∂–¥–∏ –µ—â—ë –Ω–µ–º–Ω–æ–≥–æ...",
		
		// mega bruh
		"–°—ç—Ä, –ø—Ä–æ—à—É –í–∞—Å, –Ω–µ –±–µ–π—Ç–µ –º–æ—é –≥—Ä—É–¥–Ω—É—é –∫–ª–µ—Ç–∫—É –∞—Ä–º–∞—Ç—É—Ä–æ–π ü§ì",
		"–í–∞—É. –û–Ω–æ —Ä–∞–±–æ—Ç–∞–µ—Ç",
		"–í –ø–∏—Ç–µ—Ä–µ –ø–∏—Ç—å... –í –ø–∏—Ç–µ—Ä–µ –ø–∏—Ç—å...",
		"–ù–∏—Å–∏–∫—Å - –ø–∏–ø–∞",
		"–ò—Ö —Å–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ~",
		"–ö–æ–≥–¥–∞ –º–æ—Å–∫–æ–≤—Å–∫–æ-–ø–∏—Ç–µ—Ä—Å–∫–∞—è –≤–µ—Ç–∫–∞ –º–µ—Ç—Ä–æ?"
	];
	if (Math.random() > 0.5) { // –≤–µ—Ä–æ—è—Ç–æ—Å—Ç—å 50/50
		return funnyLoadingStrings[Math.floor(Math.random() * (funnyLoadingStrings.length))]; // –ø–æ–ª—É—á–∞–µ–º —Ä–∞–Ω–¥–æ–º–Ω—É—é —Å–º–µ—à–Ω—è–≤–∫—É
	} else {
		return funnyLoadingStrings[0]; // –ø–æ–ª—É—á–∞–µ–º –Ω–æ—Ä–º–∞–ª—å–Ω—É—é —Å—Ç—Ä–æ–∫—É
	}
}
sillyProcess.getTransportFull = async (nek, transType, msg) => {
	let loadingString;
	let embed;
	let waitmsg;
	if (msg) {
		loadingString = sillyProcess.getLoadingString();
		embed = new Discord.EmbedBuilder()
			.setTitle('–í–µ–¥—É –ø–æ–∏—Å–∫...')
			.setColor(nek.config.basecolor)
			.setDescription(loadingString);
		waitmsg = await msg.reply({ embeds: [embed] }); // –∑–∞–ø–æ–º–∏–Ω–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
	}
	
	let transports = await webProcess.getTransport(transType, fullbbox); // –∏—â–µ–º –ø–æ –≤—Å–µ–º—É –ø–∏—Ç–µ—Ä—É
	if (!transports) { // –µ—Å–ª–∏ –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ (–∏–ª–∏ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞)
		return false;
	}
	
	let limitReached = [];
	if (transports.length === 1000) { // –µ—Å–ª–∏ –º—ã —É–ø–µ—Ä–ª–∏—Å—å –≤ –ª–∏–º–∏—Ç –∑–∞–ø—Ä–æ—Å–∞
		let counter = 0;
		if (msg) {
			embed = new Discord.EmbedBuilder()
				.setTitle('–í–µ–¥—É –ø–æ–∏—Å–∫...')
				.setColor(nek.config.basecolor)
				.setDescription(loadingString + ' `' + counter + '/' + partbboxes.length + "`");
			await waitmsg.edit({ embeds: [embed] });
		}
		
		// –Ω–∞—á–∏–Ω–∞–µ–º –ø–æ–∏—Å–∫ –ø–æ –∑–æ–Ω–∞–º
		transports = [];
		for await (const bbox of partbboxes) {
			counter += 1;
			const transPart = await webProcess.getTransport(transType, bbox);
			transports = [...transports, ...transPart];
			if (transPart.length === 1000) {
				limitReached.push(counter); // –∑–∞–ø–æ–º–∏–Ω–∞–µ–º –Ω–∞ –∫–∞–∫–æ–π –ø–æ–ø—ã—Ç–∫–µ –º—ã —É–ø–µ—Ä–ª–∏—Å—å –≤ –ª–∏–º–∏—Ç
			}
			if (msg) {
				embed = new Discord.EmbedBuilder()
					.setTitle('–í–µ–¥—É –ø–æ–∏—Å–∫...')
					.setColor(nek.config.basecolor)
					.setDescription(loadingString + ' `' + counter + '/' + partbboxes.length + "`");
				await waitmsg.edit({ embeds: [embed] });
			}
		}
	}
	return {transports: transports, limit: limitReached, message: waitmsg};
}

// == –û—Å–Ω–æ–≤–Ω–æ–π –∫–æ–¥. –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ —É—Å—Ç–∞–Ω–æ–≤–∫–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫–æ–º–∞–Ω–¥–µ
class NewOrgp {
	constructor(nek){
		this.category = "transport";
		
		this.ignoreModal = true;
		this.perms = ["EMBED_LINKS", "ATTACH_FILES"];
        this.name = "neworgp"; // –∏–º—è –∫–æ–º–∞–Ω–¥—ã
		this.desc = "–ø–∏—Ç–µ—Ä—Å–∫–∏–π –Ω–∞–∑–µ–º–Ω—ã–π —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç"; // –æ–ø–∏—Å–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã –≤ –æ–±—â–µ–º —Å–ø–∏—Å–∫–µ –∫–æ–º–∞–Ω–¥
		this.advdesc = "–ë–µ—Ä—ë—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –º–∞—Ä—à—Ä—É—Ç–∞—Ö –≤ –°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥–µ —Å [—Å–∞–π—Ç–∞ \"–ü–æ—Ä—Ç–∞–ª –û–±—â–µ—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞ –°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥–∞\"](https://transport.orgp.spb.ru/).\n" +
			"–§–æ—Ç–æ –∏ –¥–∞–Ω–Ω—ã–µ –æ —Ç—Ä–æ–ª–ª–µ–π–±—É—Å–∞—Ö –∏ —Ç—Ä–∞–º–≤–∞—è—Ö –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è—é—Ç—Å—è —Å–∞–π—Ç–æ–º [transphoto.org](https://transphoto.org).\n" +
			"–§–æ—Ç–æ –∏ –¥–∞–Ω–Ω—ã–µ –æ–± –∞–≤—Ç–æ–±—É—Å–∞—Ö –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è—é—Ç—Å—è —Å–∞–π—Ç–æ–º [fotobus.msk.ru](https://fotobus.msk.ru/).\n\n" +
			"–°–¥–µ–ª–∞–Ω–æ –ø–æ –∑–∞–∫–∞–∑—É <@374144960221413386>"; // –æ–ø–∏—Å–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã –≤ –ø–æ–º–æ—â–µ –ø–æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –∫–æ–º–∞–Ω–¥–µ
		this.args = "<–æ–ø–µ—Ä–∞—Ü–∏—è> <—Ç–∏–ø> <–Ω–æ–º–µ—Ä>"; // –∞—Ä–≥—É–º–µ–Ω—Ç—ã –≤ –æ–±—â–µ–º —Å–ø–∏—Å–∫–µ –∫–æ–º–∞–Ω–¥
		this.argsdesc =
		"`<–æ–ø–µ—Ä–∞—Ü–∏—è>` - –º–∞—Ä—à—Ä—É—Ç (–º...) [–ø–æ–∏—Å–∫ –º–∞—à–∏–Ω –Ω–∞ –¥–∞–Ω–Ω–æ–º –≤–∞–º–∏ –º–∞—Ä—à—Ä—É—Ç–µ], –ø–æ–∏—Å–∫ (–ø...) [–ø–æ–∏—Å–∫ –º–∞—Ä—à—Ä—É—Ç–∞, –µ—Å–ª–∏ –∑–∞–±—ã–ª–∏], –Ω–æ–º–µ—Ä (–Ω...) [–ø–æ–∏—Å–∫ –º–∞—à–∏–Ω—ã –ø–æ –Ω–æ–º–µ—Ä—É]\n" +
		"`<—Ç–∏–ø>` - —Ç—Ä–æ–ª–ª–µ–π–±—É—Å (—Ç—Ä–æ...), –∞–≤—Ç–æ–±—É—Å (–∞–≤...), —Ç—Ä–∞–º–≤–∞–π (—Ç—Ä–∞...)\n" +
		"`<–Ω–æ–º–µ—Ä>` - –Ω–æ–º–µ—Ä –º–∞—Ä—à—Ä—É—Ç–∞"; // –æ–ø–∏—Å–∞–Ω–∏–µ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ –≤ –ø–æ–º–æ—â–µ –ø–æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –∫–æ–º–∞–Ω–¥–µ
		this.advargs = "<–æ–ø–µ—Ä–∞—Ü–∏—è> <—Ç–∏–ø> <–Ω–æ–º–µ—Ä>"; // –∞—Ä–≥—É–º–µ–Ω—Ç—ã –≤ –ø–æ–º–æ—â–µ –ø–æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –∫–æ–º–∞–Ω–¥–µ
    };
    async run(nek, client, msg, args){
		args.shift(); // —Ä–µ–∂–µ–º –ø–µ—Ä–≤—ã–π –∞—Ä–≥—É–º–µ–Ω—Ç —Ç.–∫. —ç—Ç–æ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã
		let orgpArgs = {}; // –¥–µ–ª–∞–µ–º –ø—É—Å—Ç–æ–π –æ–±—ä–µ–∫—Ç —Å –∞—Ä–≥—É–º–µ–Ω—Ç–∞–º–∏
		if (!args[0]) { // –µ—Å–ª–∏ –Ω–µ –±—ã–ª –¥–∞–Ω –Ω–∏–∫–∞–∫–æ–π –∞—Ä–≥—É–º–µ–Ω—Ç, —Ç–æ –∑–∞–ø—Ä–æ—Å–∏—Ç—å –∏—Ö
			args = await argsProcess.gui(nek, msg, args); // –∂–¥–µ–º –≥–æ—Ç–æ–≤—ã—Ö –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤
			if (!args) return;
		}
		orgpArgs = await argsProcess.cli(args); // –∂–¥–µ–º –≥–æ—Ç–æ–≤—ã—Ö –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ (—á–µ—Ä–µ–∑ —Ç–µ–∫—Å—Ç–æ–≤—ã–µ –∞—Ä–≥—É–º–µ–Ω—Ç—ã)
		if (orgpArgs.workMode === "byRoute") {
			await msgProcess.searchByRouteOrLabel(nek, msg, orgpArgs.arbArg, orgpArgs.transType, "route");
		} else if (orgpArgs.workMode === "byLabel") {
			await msgProcess.searchByRouteOrLabel(nek, msg, orgpArgs.arbArg, orgpArgs.transType, "label");
		} else if (orgpArgs.workMode === "searchRoute") {
			await msgProcess.searchRouteName(nek, msg, orgpArgs.arbArg, orgpArgs.transType);
		} else {
			let embed = new Discord.EmbedBuilder()
				.setTitle('–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ–ø–µ—Ä–∞—Ü–∏—è')
				.setColor(nek.config.errorcolor)
				.setDescription('–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ–ø–µ—Ä–∞—Ü–∏—è. –ü—Ä–æ—á–∏—Ç–∞–π—Ç–µ –∞—Ä–≥—É–º–µ–Ω—Ç—ã –≤ `' + nek.config.prefix + this.name + ' --help`')
			await msg.reply({ embeds: [embed] });
		}
		return;
	}
	
	async interaction(nek, client, interaction){
		const customId = interaction.customId.split("_");
		if (customId[4] === "map" || customId[4] === "MAP"){ // map (–∫–Ω–æ–ø–∫–∏ "–ú–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ" –∏ "–û–±–Ω–æ–≤–∏—Ç—å")
			let parameters = {
				zoom: Number(customId[5]),
				transportType: customId[3],
				authorId: interaction.user.id,
				message: interaction.message
			}
			if (!interaction.values) { // –µ—Å–ª–∏ –±—ã–ª–∞ –Ω–∞–∂–∞—Ç–∞ –∫–Ω–æ–ø–∫–∞
				parameters.label = interaction.message.embeds[0].data.title; // –±–µ—Ä—ë–º –±–æ—Ä—Ç. –Ω–æ–º–µ—Ä –∏–∑ –∑–∞–≥–æ–ª–æ–≤–∫–∞
				parameters.label = parameters.label.substring(1,parameters.label.indexOf(" "));
			} else { // –µ—Å–ª–∏ –±—ã–ª –≤—ã–±—Ä–∞–Ω –ø—É–Ω–∫—Ç –∏–∑ —Å–ø–∏—Å–∫–∞
				parameters.label = interaction.values[0]; // –±–µ—Ä—ë–º –±–æ—Ä—Ç. –Ω–æ–º–µ—Ä –∏–∑ —Å–ø–∏—Å–∫–∞
			}
			
			for await (let component of interaction.message.components) { // —Å–º–æ—Ç—Ä–∏–º –≤—Å–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã —Å–æ–æ–±—â–µ–Ω–∏—è
				if (component.components[0].data?.type === 3) { // –∏—â–µ–º —Å–ø–∏—Å–æ–∫
					parameters.list = component; // –∑–∞–ø–æ–º–∏–Ω–∞–µ–º —Å–ø–∏—Å–æ–∫
				}
			}
			
			await interaction.deferUpdate();
			await showMap(nek, parameters);
			return;
		}
		await interaction.reply({content: '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –í–æ–∑–º–æ–∂–Ω–æ –≤—ã –ø—ã—Ç–∞–µ—Ç–µ—Å—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Å–ª–∏—à–∫–æ–º —Å—Ç–∞—Ä–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.'});
		return;
	}
};

module.exports = NewOrgp;