const Discord = require("discord.js");
const https = require("https");
const StaticMaps = require('staticmaps');
const numco = require("numco");

const fullbbox = 		"31.262970,60.444011,28.473816,59.451358"; // https://i.imgur.com/l6al1YY.png

const upperbbox = 		"31.262970,60.444011,28.473816,60.077345"; // https://i.imgur.com/3YGHqB5.png
const upcitybbox = 		"31.262970,60.077345,28.473816,59.983189"; // https://i.imgur.com/3YGHqB5.png
const midcitybbox = 	"31.262970,59.983189,28.473816,59.905812"; // –æ
const downcitybbox = 	"31.262970,59.905812,28.473816,59.830670"; // https://i.imgur.com/3YGHqB5.png
const downbbox = 		"31.262970,59.830670,28.473816,59.451358"; // https://i.imgur.com/3YGHqB5.png

// –¥–ª—è –Ω–æ—Ä–º–∞–ª—å–Ω–æ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ç–∏–ø–∞ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞
let readableType = [];
readableType['trolley'] = "–¢—Ä–æ–ª–ª–µ–π–±—É—Å";
readableType['bus'] = "–ê–≤—Ç–æ–±—É—Å";
readableType['tram'] = "–¢—Ä–∞–º–≤–∞–π";

let dirToBlock = [];
dirToBlock[0] = "üü¶";
dirToBlock[1] = "üüß";

class Orgp {
	constructor(nek){
		
		this.category = "info"
		
		this.perms = ["EMBED_LINKS", "ATTACH_FILES"];
        this.name = "orgp"; // –∏–º—è –∫–æ–º–∞–Ω–¥—ã
		this.desc = "–ø–∏—Ç–µ—Ä—Å–∫–∏–π —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç"; // –æ–ø–∏—Å–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã –≤ –æ–±—â–µ–º —Å–ø–∏—Å–∫–µ –∫–æ–º–∞–Ω–¥
		this.advdesc = "–ë–µ—Ä—ë—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –º–∞—Ä—à—Ä—É—Ç–∞—Ö –≤ –°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥–µ —Å [—Å–∞–π—Ç–∞ \"–ü–æ—Ä—Ç–∞–ª –û–±—â–µ—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞ –°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥–∞\"](https://transport.orgp.spb.ru/).\n–§–æ—Ç–æ –∏ –¥–∞–Ω–Ω—ã–µ –æ –º–∞—à–∏–Ω–∞—Ö –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è—é—Ç—Å—è —Å–∞–π—Ç–æ–º [transphoto.org](https://transphoto.org).\n\n–°–¥–µ–ª–∞–Ω–æ —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ –¥–ª—è <@374144960221413386>"; // –æ–ø–∏—Å–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã –≤ –ø–æ–º–æ—â–µ –ø–æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –∫–æ–º–∞–Ω–¥–µ
		this.args = "<—Ç–∏–ø> <–Ω–æ–º–µ—Ä>"; // –∞—Ä–≥—É–º–µ–Ω—Ç—ã –≤ –æ–±—â–µ–º —Å–ø–∏—Å–∫–µ –∫–æ–º–∞–Ω–¥
		this.argsdesc = "<—Ç–∏–ø> - —Ç—Ä–æ–ª–ª–µ–π–±—É—Å (—Ç—Ä–æ..), –∞–≤—Ç–æ–±—É—Å (–∞–≤..), —Ç—Ä–∞–º–≤–∞–π (—Ç—Ä–∞..)\n<–Ω–æ–º–µ—Ä> - –Ω–æ–º–µ—Ä –º–∞—Ä—à—Ä—É—Ç–∞"; // –æ–ø–∏—Å–∞–Ω–∏–µ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ –≤ –ø–æ–º–æ—â–µ –ø–æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –∫–æ–º–∞–Ω–¥–µ
		this.advargs = "<—Ç–∏–ø> <–Ω–æ–º–µ—Ä>"; // –∞—Ä–≥—É–º–µ–Ω—Ç—ã –≤ –ø–æ–º–æ—â–µ –ø–æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –∫–æ–º–∞–Ω–¥–µ
    };

    async run(nek, kitsune, msg, args){
		args.shift(); // —Ä–µ–∂–µ–º –ø–µ—Ä–≤—ã–π –∞—Ä–≥—É–º–µ–Ω—Ç —Ç.–∫. —ç—Ç–æ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã
		let type = false;
		let routeName = false;
		for await (const arg of args) {  
			if (arg.toLowerCase().startsWith('—Ç—Ä–æ') || arg.toLowerCase().startsWith('nhj')) { // —Ç—Ä–æ–ª–ª–µ–π–±—É—Å
				type = "trolley";
			} else if (arg.toLowerCase().startsWith('–∞–≤') || arg.toLowerCase().startsWith('fd')) { // –∞–≤—Ç–æ–±—É—Å
				type = "bus";
			} else if (arg.toLowerCase().startsWith('—Ç—Ä–∞') || arg.toLowerCase().startsWith('nhf')) { // —Ç—Ä–∞–º–≤–∞–π
				type = "tram";
			} else { // –ø—Ä–µ–¥–ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ –Ω–æ–º–µ—Ä –º–∞—Ä—à—Ä—É—Ç–∞
				routeName = arg.toLowerCase();
			}
		}
		
		if (!routeName) { // –µ—Å–ª–∏ –Ω–µ —É–∫–∞–∑–∞–Ω –Ω–æ–º–µ—Ä –º–∞—Ä–≥—Ä—É—Ç–∞
			let embed = new Discord.EmbedBuilder()
			.setTitle('–ê —á–µ –∏—Å–∫–∞—Ç—å?')
			.setColor(nek.config.errorcolor)
			.setDescription('–£–∫–∞–∂–∏—Ç–µ –Ω–æ–º–µ—Ä –º–∞—Ä—à—Ä—É—Ç–∞')
			await msg.reply({ embeds: [embed] });
			return;
		}
		if (!type) { // –µ—Å–ª–∏ –Ω–µ —É–∫–∞–∑–∞–Ω –Ω–æ–º–µ—Ä –º–∞—Ä–≥—Ä—É—Ç–∞
			let embed = new Discord.EmbedBuilder()
			.setTitle('–ê —á–µ –∏—Å–∫–∞—Ç—å?')
			.setColor(nek.config.errorcolor)
			.setDescription('–£–∫–∞–∂–∏—Ç–µ —Ç–∏–ø —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞, —è —Ä–∞–∑—É—á–∏–ª—Å—è –µ–≥–æ —É–≥–∞–¥—ã–≤–∞—Ç—å')
			await msg.reply({ embeds: [embed] });
			return;
		}
		let embed = new Discord.EmbedBuilder()
			.setTitle('–í–µ–¥—É –ø–æ–∏—Å–∫...')
			.setColor(nek.config.basecolor)
			.setDescription('–ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ —Å–µ—Ä–≤–µ—Ä—É...') // TODO: —Ä–∞–Ω–¥–æ–º–Ω–∞—è —Å–º–µ—à–Ω—è–≤–∫–∞
		const waitmsg = await msg.reply({ embeds: [embed] }); // –∑–∞–ø–æ–º–∏–Ω–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
		
		let transports  = await getTransport(type, fullbbox); // –∏—â–µ–º –ø–æ –≤—Å–µ–º—É –ø–∏—Ç–µ—Ä—É
		if (!transports) { // –µ—Å–ª–∏ –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ (–∏–ª–∏ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞)
			let embed = new Discord.EmbedBuilder()
			.setTitle('–ö–∞–≤–æ')
			.setColor(nek.config.errorcolor)
			.setDescription('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –æ—Ç–≤–µ—Ç –æ—Ç —Å–∞–π—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑')
			await waitmsg.edit({ embeds: [embed] });
			return;
		}
		let limitReached = false;
		if (transports.length === 1000) { // –µ—Å–ª–∏ –º—ã —É–ø–µ—Ä–ª–∏—Å—å –≤ –ª–∏–º–∏—Ç –∑–∞–ø—Ä–æ—Å–∞
			transports = [];
			let embed = new Discord.EmbedBuilder()
			.setTitle('–í–µ–¥—É –ø–æ–∏—Å–∫...')
			.setColor(nek.config.basecolor)
			.setDescription('–ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ —Å–µ—Ä–≤–µ—Ä—É... `0%`')
			await waitmsg.edit({ embeds: [embed] });
			
			// –Ω–∞—á–∏–Ω–∞–µ–º –ø–æ–∏—Å–∫ –ø–æ –∑–æ–Ω–∞–º
			let transPart  = await getTransport(type, upperbbox);
			transports = [...transports, ...transPart];
			if (transPart.length === 1000) {
				limitReached = true;
			}
			embed = new Discord.EmbedBuilder()
				.setTitle('–í–µ–¥—É –ø–æ–∏—Å–∫...')
				.setColor(nek.config.basecolor)
				.setDescription('–ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ —Å–µ—Ä–≤–µ—Ä—É... `25%`')
			await waitmsg.edit({ embeds: [embed] });
			
			transPart  = await getTransport(type, upcitybbox);
			transports = [...transports, ...transPart];
			if (transPart.length === 1000) {
				limitReached = true;
			}
			embed = new Discord.EmbedBuilder()
				.setTitle('–í–µ–¥—É –ø–æ–∏—Å–∫...')
				.setColor(nek.config.basecolor)
				.setDescription('–ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ —Å–µ—Ä–≤–µ—Ä—É... `50%`')
			await waitmsg.edit({ embeds: [embed] });
			
			transPart  = await getTransport(type, midcitybbox);
			transports = [...transports, ...transPart];
			if (transPart.length === 1000) {
				limitReached = true;
			}
			embed = new Discord.EmbedBuilder()
				.setTitle('–í–µ–¥—É –ø–æ–∏—Å–∫...')
				.setColor(nek.config.basecolor)
				.setDescription('–ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ —Å–µ—Ä–≤–µ—Ä—É... `75%`')
			await waitmsg.edit({ embeds: [embed] });
			
			transPart  = await getTransport(type, downcitybbox);
			transports = [...transports, ...transPart];
			if (transPart.length === 1000) {
				limitReached = true;
			}
			embed = new Discord.EmbedBuilder()
				.setTitle('–í–µ–¥—É –ø–æ–∏—Å–∫...')
				.setColor(nek.config.basecolor)
				.setDescription('–ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ —Å–µ—Ä–≤–µ—Ä—É... `100%`')
			await waitmsg.edit({ embeds: [embed] });
			
			transPart  = await getTransport(type, downbbox);
			transports = [...transports, ...transPart];
			if (transPart.length === 1000) {
				limitReached = true;
			}
		}
		let routeTransports = []; // —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç—ã –Ω–∞ –Ω—É–∂–Ω–æ–º –Ω–∞–º –º–∞—Ä—à—Ä—É—Ç–µ
		let outRoutes = []; // –±–æ—Ä—Ç–æ–≤—ã–µ –Ω–æ–º–µ—Ä–∞
		for await (const trans of transports) { // —á–µ–∫–∞–µ–º –≤—Å–µ –º–∞—Ä—à—Ä—É—Ç—ã
			if (trans.RouteShortName.toLowerCase() === routeName) { // –µ—Å–ª–∏ —ç—Ç–æ –º–∞—Ä—à—Ä—É—Ç, –∫–æ—Ç–æ—Ä—ã–π –±—ã–ª —É–∫–∞–∑–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
				routeTransports.push(trans); // –≤ –∫–Ω–∏–∂–µ—á–∫—É –∑–∞–ø–∏—Å–∞—Ç—å
				outRoutes.push(dirToBlock[trans.RouteDirection] + " ‚Ññ" + trans.VehicleLabel + "\n")
			}
		}
		outRoutes.sort(); // —Å–æ—Ä—Ç–∏—Ä—É–µ–º
		outRoutes = outRoutes.join(''); // –ø—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –º–∞—Å—Å–∏–≤ –≤ —Å—Ç—Ä–æ–∫—É
		if (!routeTransports[0]) { // –µ—Å–ª–∏ –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞—à–ª–∏
			let embed = new Discord.EmbedBuilder()
			.setTitle('no bitches')
			.setColor(nek.config.errorcolor)
			.setDescription('–ù–µ –Ω–∞—à–µ–ª –Ω–∏—á–µ–≥–æ')
			await waitmsg.edit({ embeds: [embed] });
			return;
		}
		embed = new Discord.EmbedBuilder()
			.setTitle('–ù—É —Ç–∏–ø–æ')
			.setColor(nek.config.basecolor)
			.setDescription("–ù–∞–π–¥–µ–Ω–æ " + routeTransports.length + " (" + readableType[type] + "):\n" + outRoutes + "\n" +
			"üü¶ - —Ç—É–¥–∞ / üüß - –æ–±—Ä–∞—Ç–Ω–æ")
		if (limitReached) {
			embed.setFooter({text: "–í–ù–ò–ú–ê–ù–ò–ï! –ë—ã–ª –¥–æ—Å—Ç–∏–≥–Ω—É—Ç –ª–∏–º–∏—Ç —Å–∞–π—Ç–∞. –ò–º–µ–π—Ç–µ –≤–≤–∏–¥—É, —á—Ç–æ –≤ —Å–ø–∏—Å–∫–µ –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É–µ—Ç –Ω–µ –≤–µ—Å—å —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç. –≠—Ç–æ –Ω–µ –≤–∞—à–∞ –≤–∏–Ω–∞, –ø—Ä–æ—Å—Ç–æ —Å–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞."});
		}
		await waitmsg.edit({ embeds: [embed] });
		
		
///////// –ú–ê–ü–ê
		const randomNumber = Math.floor(Math.random() * (routeTransports.length));
		const car = routeTransports[randomNumber];
		
		embed = new Discord.EmbedBuilder()
			.setTitle('–≠–∫—Å–ø–µ—Ä–µ–º–µ–∫—Å—ã')
			.setColor(nek.config.basecolor)
			.setDescription("–ì–µ–Ω–µ—Ä–∏—Ä—É—é –∫–∞—Ä—Ç—É –¥–ª—è " + car.VehicleLabel + "...")
		const mapmsg = await msg.reply({ embeds: [embed] });
		
		
		let directionRounded = Math.ceil(car.Direction / 15) * 15; // –æ–∫—Ä—É–≥–ª—è–µ–º –≥—Ä–∞–¥—É—Å—ã –ø–æ 15
		if (directionRounded === 360) directionRounded = 0;
		
		const markerPath = "./src/assets/orgp/marker_" + directionRounded + ".png";
		
		const vehicleIconPath = "./src/assets/orgp/" + car.TransportType + ".png";
		
		
		const map = new StaticMaps({
			width: 512,
			height: 512,
			tileUrl: 'https://tile.openstreetmap.org/{z}/{x}/{y}.png'
		});
		
		const markerparam = {
		  img: markerPath,
		  offsetX: 32,
		  offsetY: 32,
		  width: 64,
		  height: 64,
		  coord : [car.Location.Longitude, car.Location.Latitude]
		};
		map.addMarker(markerparam); // —Ä–∏—Å—É–µ–º —Å—Ç—Ä–µ–ª–æ—á–∫—É
		const iconparam = {
		  img: vehicleIconPath,
		  offsetX: 32,
		  offsetY: 32,
		  width: 64,
		  height: 64,
		  coord : [car.Location.Longitude, car.Location.Latitude]
		};
		map.addMarker(iconparam); // —Ä–∏—Å—É–µ–º –∏–∫–æ–Ω–∫—É
		
		await map.render([car.Location.Longitude, car.Location.Latitude], 15); // —Ä–µ–Ω–¥–µ—Ä–∏–º –∫–∞—Ä—Ç—É
		const mappic = await map.image.buffer('image/png'); // —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –±—É—Ñ–µ—Ä
		const unixTime = Math.floor(Date.now() / 1000);
		embed = new Discord.EmbedBuilder()
			.setTitle('–≠–∫—Å–ø–µ—Ä–µ–º–µ–∫—Å—ã')
			.setColor(nek.config.basecolor)
			.setDescription("–ö–∞—Ä—Ç–∞ –¥–ª—è " + car.VehicleLabel + " –Ω–∞ <t:" + unixTime +":f>")
			.setImage('attachment://' + car.VehicleLabel + '.png')
			.setFooter({text: '–ù–µ—Ç. –ü–æ–∫–∞ –Ω–µ–ª—å–∑—è –≤—ã–±—Ä–∞—Ç—å –¥–ª—è –∫–∞–∫–æ–π –∏–º–µ–Ω–Ω–æ –º–∞—à–∏–Ω—ã –æ—Ç–æ–±—Ä–∞–∑–∏—Ç—å –∫–∞—Ä—Ç—É. –ñ–¥–∏—Ç–µ –æ–±–Ω–æ–≤—ã'})
		const fileWithName = new Discord.AttachmentBuilder(mappic, { name: car.VehicleLabel + '.png' });
		await mapmsg.edit({files: [fileWithName], embeds: [embed]}); // –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º
		return;

		async function getTransport(type, bbox) {
			let transport = ''
			if (type) {
				transport = 'transport=' + type + '&'
			}
			const options = { // –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –æ–±—Ä–∞—â–µ–Ω–∏—è –∫ —Å–µ—Ä–≤–∞–∫—É
			  hostname: 'nts-admin.orgp.spb.ru',
			  port: 443,
			  path: '/api/visary/geometry/vehicle?' + transport + 'bbox=' + bbox,
			  method: 'GET',
			  headers: {}
			}
			return new Promise((resolve, reject) => { // –∂–¥–µ–º –ø–æ–∫–∞ –ø–æ–ª—É—á–∏–º –æ—Ç–≤–µ—Ç –æ—Ç —Å–∞–π—Ç–∞
				const req = https.request(options, (res) => { // –æ–±—Ä–∞—â–∞–µ–º—Å—è –∫ —Å–µ—Ä–≤–∞–∫—É
					let data = "";
					res.on('data', (d) => {
						//console.log('got data');
						data = data + d;
					});
					res.on('end', () => {
						//console.log(data);
						try {
							const resp = JSON.parse(data);
							if (!resp.Error) {
								resolve(resp);
							} else {
								resolve(false);
							}
						} catch(e) {
							console.error(e);
							resolve(false);
						}
					});
				});
				req.on('error', (e) => {
					reject(e);
				});
				req.end();
			})
		}
	}
	butt(kitsune, interaction, args){
		if (interaction.values[0]) {
			get_stts_vehicle(kitsune, interaction, args, interaction.values[0].split("_"))
		} else {
			return;
		};
		function get_stts_vehicle(kitsune, interaction, args, vallu) { // get last photo from transphoto.org
		
			// types
			//
			// 1 - tram
			// 2 - trolleybus
			
			// bus is not supported on this site!
			let numtype
			if (vallu[0] == "tram") {
				numtype = 1;
			} else if (vallu[0] = 'trolley') {
				numtype = 2;
			} else {
				console.log('no you cant search that type of transphoto.org ')
				return;
			}
			const options = { // –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –æ–±—Ä–∞—â–µ–Ω–∏—è –∫ —Å–µ—Ä–≤–∞–∫—É
			  uri: 'https://transphoto.org/api.php?action=index-qsearch&cid=2&type=' + numtype + '&num=' + vallu[1],
			  headers: {
				"authority": "transphoto.org",
				"scheme": "https"
			  }
			};
			request.get(options, (err, res, body) => { // –æ–±—Ä–∞—â–∞–µ–º—Å—è –∫ —Å–µ—Ä–≤–∞–∫—É
				if (body) {
					if (body.indexOf('href') != -1) {
						let vehicle_page = body.slice(body.indexOf('href')+6)
						vehicle_page = vehicle_page.slice(0, vehicle_page.indexOf('"'))
						vehicle_page = 'https://transphoto.org' + vehicle_page
						get_stts_photodate(kitsune, interaction, args, vallu, vehicle_page)
					} else {
						let embed = new Discord.EmbedBuilder()
						embed.setTitle(kitsune.user.username + ' - orgp')
						embed.setColor(`#F00000`)
						embed.setDescription('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ ' + vallu[1])
						interaction.reply({ embeds: [embed]})
						return;
					}
				} else {
					let embed = new Discord.EmbedBuilder()
					embed.setTitle(kitsune.user.username + ' - orgp')
					embed.setColor(`#F00000`)
					embed.setDescription('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ ' + vallu[1])
					interaction.reply({ embeds: [embed]})
					return;
				}
			});
		};
		
		function get_stts_photodate(kitsune, msg, args, vallu, link) { // get last photo data from transphoto.org vehicle page
			msg.deferUpdate();
			const options = { // –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –æ–±—Ä–∞—â–µ–Ω–∏—è –∫ —Å–µ—Ä–≤–∞–∫—É
			  uri: link,
			  headers: {
				"authority": "transphoto.org",
				"scheme": "https"
			  }
			};
			request.get(options, (err, res, body) => { // –æ–±—Ä–∞—â–∞–µ–º—Å—è –∫ —Å–µ—Ä–≤–∞–∫—É
				if (body) {
					let model_info = false
					let park_info = false
					let park_link = false
					let photo_place = false
					let photo_date = false
					let photo_author = false
					let photo_link = false
					let photo_img = false
					
					if (body.indexOf('<a href="/model/') != 1) {
						model_info = body.slice(body.indexOf('<a href="/model/'))
						model_info = model_info.slice(model_info.indexOf('/">')+3,model_info.indexOf('</b>'))
					};
					if (body.indexOf('<a href="/list.php?did=') != 1) {
						park_info = body.slice(body.indexOf('<a href="/list.php?did='))
						park_info = park_info.slice(park_info.indexOf('">')+2,park_info.indexOf('</a>'))
					};
					if (body.indexOf('<a href="/list.php?did=') != 1) {
						park_link = body.slice(body.indexOf('<a href="/list.php?did=')+9, )
						park_link = park_link.slice(0,park_link.indexOf('">'))
						if (park_link.length > 64) {
							park_link = "https://youtu.be/dQw4w9WgXcQ"
						}
					};
					if (body.indexOf('<b class="pw-place">') != 1 ) { 
						photo_place = body.slice(body.indexOf('<b class="pw-place">')+20)
						photo_place = photo_place.slice(0,photo_place.indexOf('</b>'))
						photo_place = photo_place.replace(/&quot;/g, '"')
						photo_place = photo_place.replace(/<img src=\"\/img\/place_arrow.gif\" alt=\"‚Üí\" width=\"15\" height=\"11\" style=\"position:relative; top:-1px; margin:0 3px\">/g, '‚ñ∂')
						photo_place = photo_place.replace(/<img src=\"\/img\/place_arrow.gif\" alt=\"\/\" width=\"15\" height=\"11\" style=\"position:relative; top:-1px; margin:0 3px\">/g, '‚ñ∂')
						if (photo_place.length > 196) {
							photo_place = "–Ω–µ—Ç—É"
						}
					}
					if (body.indexOf('<p class="sm"><b>') != 1 ) { 
						photo_date = body.slice(body.indexOf('<p class="sm"><b>')+17)
						photo_author = photo_date.slice(photo_date.indexOf('<a gref=')+8, photo_date.indexOf('</a>'))
						photo_author = photo_author.slice(photo_author.indexOf('/">')+3)
						if (photo_author.length > 64) {
							photo_author = "*(–Ω–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å —É–∑–Ω–∞—Ç—å)*"
						}
						photo_date = photo_date.slice(0,photo_date.indexOf('</b>'))
						if (photo_date.length > 64) {
							photo_date = "–Ω–µ—Ç—É"
						}
					};
					if (body.indexOf('<td class="pb_photo">') != 1 ) { 
						photo_img = body.slice(body.indexOf('<td class="pb_photo">')+21)
						
						photo_link = photo_img.slice(photo_img.indexOf('<a href="')+9)
						photo_link = photo_link.slice(0, photo_link.indexOf('"'))
						photo_link = 'https://transphoto.org' + photo_link
						if (photo_link.length > 128) {
							photo_link = "https://youtu.be/dQw4w9WgXcQ"
						}
						
						photo_img = photo_img.slice(photo_img.indexOf('<img class="f" src="')+20)
						photo_img = photo_img.slice(0, photo_img.indexOf('" alt'))
						photo_img = 'https://transphoto.org' + photo_img
						photo_img = photo_img.replace(/_s/g, "")
						if (photo_img.length > 128) {
							photo_img = "https://i.imgur.com/oJGKR0l.png"
						}
					};
					if (model_info && park_info && park_link && photo_place && photo_date && photo_author && photo_link && photo_img) {
						let embed = new Discord.EmbedBuilder()
						embed.setTitle(kitsune.user.username + ' - orgp')
						embed.setColor(`#F36B00`)
						embed.setDescription("[**" + model_info + " ‚Ññ" + vallu[1] + "**](" + photo_link + ")\n[" + park_info +"](https://transphoto.org" + park_link + ")")
						embed.addFields({ name: "–ü–æ—Å–ª–µ–¥–Ω–µ–µ —Ñ–æ—Ç–æ ‚Ññ" + vallu[1] + " –Ω–∞ transphoto.org", value: "–£–ª–∏—Ü–∞: " + photo_place + "\n–î–∞—Ç–∞: " + photo_date + "\n–ê–≤—Ç–æ—Ä: " + photo_author})
						embed.setImage(photo_img)
						
						let list = new Discord.StringSelectMenuBuilder()
						list.setCustomId(msg.customId + "1")
						list.setPlaceholder('–ü–æ–ª—É—á–∏—Ç—å –±–æ–ª—å—à–µ –∏–Ω—Ñ—ã –æ...')
						numco.decompress(vallu[2]).forEach((car) => {
							if (car != "") {
								list.addOptions({
									label: String(car),
									value: String(vallu[0] + "_" + car + "_" + vallu[2])
								});
							}
						});
						
						let row = new Discord.ActionRowBuilder().addComponents(list);
						msg.message.edit({ embeds: [embed], components: [row] });
					} else {
						let embed = new Discord.EmbedBuilder()
						embed.setTitle(kitsune.user.username + ' - orgp')
						embed.setColor(`#F00000`)
						embed.setDescription("–ù—É —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ " + label)
						msg.reply({ embeds: [embed] });
					}
					
					
				}
				//get_cars_on_route(kitsune, msg, args, id)
			});
		};
		
	}
};

module.exports = Orgp;

