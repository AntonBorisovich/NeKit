const Discord = require("discord.js");
const https = require("https");
const StaticMaps = require('staticmaps');
const numco = require("numco");


// –í—Å—è–∫–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏ –æ–±—Ä–∞—â–µ–Ω–∏—è –∫ —Å–∞–π—Ç—É
const createPayload = (values) => { // —Å–æ–∑–¥–∞—Ç—å —Å–∞–π—Ç—É –æ—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∑–∞–ø—Ä–æ—Å. –ù–∞ –≤—Ö–æ–¥ –æ–±—ä–µ–∫—Ç —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–º (–Ω–∞–ø—Ä–∏–º–µ—Ä {skip: 0, take: 20})
	// –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ä–∞–∑–¥–µ–ª—è—Ç–æ—Ä
	let webkit = '----WebKitFormBoundary';
	for (let i = 0; i < 16; i++) {
		webkit += 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789'.charAt(Math.floor(Math.random() * 62)); // –±–µ—Ä—ë–º —Ä–∞–Ω–¥–æ–º —Å–∏–º–≤–æ–ª –∏ –ø–∏—Ö–∞–µ–º
	}

	// –¥–µ–ª–∞–µ–º —Ç–µ–ª–æ
	let outputBody = ""; // duh
	for (var [key, value] of Object.entries(values)) { // –ø–µ—Ä–µ–±–µ—Ä–∞–µ–º –æ–±—ä–µ–∫—Ç —Å –¥–∞–Ω–Ω—ã–º–∏
		outputBody += "--" + webkit + "\r\n"; // –ø–∏—à–µ–º —Ä–∞–∑–¥–µ–ª—è—Ç–æ—Ä
		outputBody += "Content-Disposition: form-data; name=\"" + key + "\"\r\n"; // –ø–∏—à–µ–º —Ç–∏–ø –¥–∞–Ω–Ω—ã—Ö –∏ –∏—Ö –Ω–∞–∑–≤–∞–Ω–∏–µ, —Å–∫–∏–ø —Å—Ç—Ä–æ–∫–∏
		outputBody += "\r\n"; // —Å–∫–∏–ø–∞–µ–º —Å—Ç—Ä–æ–∫—É –ø–æ—Ç–æ–º—É —á—Ç–æ bruh
		outputBody += value + "\r\n"; // –ø–∏—à–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –∏ —Å–∫–∏–ø–∞–µ–º —Å—Ç—Ä–æ–∫—É
	}
	outputBody += "--" + webkit + "--"; // –ø–∏—à–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—ã–π —Ä–∞–∑–¥–µ–ª—è—Ç–æ—Ä
	const encoder = new TextEncoder();  // —Å–æ–∑–¥–∞–µ–º —ç–Ω–∫–æ–¥–µ—Ä, —á—Ç–æ –±—ã —Å–∞–π—Ç –ø–æ–Ω—è–ª —Ä—É—Å—Å–∫–∏–µ —Å–∏–º–≤–æ–ª—ã
	return {boundary: webkit, body: encoder.encode(outputBody)}; // –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Ä–∞–∑–¥–µ–ª—è—Ç–æ—Ä –∏ —ç–Ω–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
}
const searchRoute = async (name, type) => { // –Ω–∞–π—Ç–∏ –º–∞—Ä—à—Ä—É—Ç –ø–æ –Ω–æ–º–µ—Ä—É –º–∞—Ä—à—Ä—É—Ç–∞
	let payload;
	if (type) { // –µ—Å–ª–∏ –¥–∞–Ω —Ç–∏–ø —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞
		payload = createPayload({skip: 0, take: 20, transportTypes: type, routeShortName: name}); // –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º payload
	} else {
		payload = createPayload({skip: 0, take: 20, routeShortName: name}); // –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º payload
	}
	//console.log(payload.body)
	const options = { // –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –æ–±—Ä–∞—â–µ–Ω–∏—è –∫ —Å–µ—Ä–≤–∞–∫—É
	  hostname: 'nts-admin.orgp.spb.ru',
	  port: 443,
	  path: '/api/visary/operator/route',
	  method: 'POST',
	  headers: {
		"content-type": "multipart/form-data; boundary=" + payload.boundary,
		'Content-Length': payload.body.length
	  }
	}
	return new Promise((resolve, reject) => { // –∂–¥–µ–º –ø–æ–∫–∞ –ø–æ–ª—É—á–∏–º –æ—Ç–≤–µ—Ç –æ—Ç —Å–∞–π—Ç–∞
		const req = https.request(options, (res) => { // –æ–±—Ä–∞—â–∞–µ–º—Å—è –∫ —Å–µ—Ä–≤–∞–∫—É
			let data = "";
			res.on('data', (d) => {
				//console.log('got data');
				data = data + d;
			});
			res.on('end', () => {
				//console.log(data);
				try {
					const resp = JSON.parse(data);
					if (!resp.Error) {
						resolve(resp);
					} else {
						resolve(false);
					}
				} catch(e) {
					console.error(e);
					resolve(false);
				}
			});
		});
		req.on('error', (e) => {
			reject(e);
		});
		req.write(payload.body); // –ø–∏—à–µ–º –¥–∞–Ω–Ω—ã–µ –≤ —Å–∞–π—Ç
		req.end();
	})
}
const getTransport = async (type, bbox) => {
	let transport = ''
	if (type) {
		transport = 'transport=' + type + '&';
	}
	const options = { // –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –æ–±—Ä–∞—â–µ–Ω–∏—è –∫ —Å–µ—Ä–≤–∞–∫—É
	  hostname: 'nts-admin.orgp.spb.ru',
	  port: 443,
	  path: '/api/visary/geometry/vehicle?' + transport + 'bbox=' + bbox,
	  method: 'GET',
	  headers: {}
	}
	return new Promise((resolve, reject) => { // –∂–¥–µ–º –ø–æ–∫–∞ –ø–æ–ª—É—á–∏–º –æ—Ç–≤–µ—Ç –æ—Ç —Å–∞–π—Ç–∞
		const req = https.request(options, (res) => { // –æ–±—Ä–∞—â–∞–µ–º—Å—è –∫ —Å–µ—Ä–≤–∞–∫—É
			let data = "";
			res.on('data', (d) => {
				data = data + d;
			});
			res.on('end', () => {
				try {
					const resp = JSON.parse(data);
					if (!resp.Error) {
						resolve(resp);
					} else {
						resolve(false);
					}
				} catch(e) {
					console.error(e);
					resolve(false);
				}
			});
		});
		req.on('error', (e) => {
			reject(e);
		});
		req.end();
	})
}

// –§—É–Ω–∫—Ü–∏–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏ interaction-–æ–≤
async function sendMap(nek, interaction, args) {
	// –ø–æ–ª—É—á–∞–µ–º 
	const car = routeTransports[randomNumber];
	
	embed = new Discord.EmbedBuilder()
		.setTitle('–≠–∫—Å–ø–µ—Ä–µ–º–µ–∫—Å—ã')
		.setColor(nek.config.basecolor)
		.setDescription("–ì–µ–Ω–µ—Ä–∏—Ä—É—é –∫–∞—Ä—Ç—É –¥–ª—è " + car.VehicleLabel + "...")
	const mapmsg = await msg.reply({ embeds: [embed] });
	
	
	let directionRounded = Math.ceil(car.Direction / 15) * 15; // –æ–∫—Ä—É–≥–ª—è–µ–º –≥—Ä–∞–¥—É—Å—ã –ø–æ 15
	if (directionRounded === 360) directionRounded = 0;
	
	const markerPath = "./src/assets/orgp/marker_" + directionRounded + ".png";
	
	const vehicleIconPath = "./src/assets/orgp/" + car.TransportType + ".png";

	const map = new StaticMaps({
		width: 512,
		height: 512,
		tileUrl: 'https://tile.openstreetmap.org/{z}/{x}/{y}.png'
	});
	
	const markerparam = {
	  img: markerPath,
	  offsetX: 32,
	  offsetY: 32,
	  width: 64,
	  height: 64,
	  coord : [car.Location.Longitude, car.Location.Latitude]
	};
	map.addMarker(markerparam); // —Ä–∏—Å—É–µ–º —Å—Ç—Ä–µ–ª–æ—á–∫—É
	const iconparam = {
	  img: vehicleIconPath,
	  offsetX: 32,
	  offsetY: 32,
	  width: 64,
	  height: 64,
	  coord : [car.Location.Longitude, car.Location.Latitude]
	};
	map.addMarker(iconparam); // —Ä–∏—Å—É–µ–º –∏–∫–æ–Ω–∫—É
	
	await map.render([car.Location.Longitude, car.Location.Latitude], 15); // —Ä–µ–Ω–¥–µ—Ä–∏–º –∫–∞—Ä—Ç—É
	const mappic = await map.image.buffer('image/png'); // —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –±—É—Ñ–µ—Ä
	const unixTime = Math.floor(Date.now() / 1000);
	embed = new Discord.EmbedBuilder()
		.setTitle('–≠–∫—Å–ø–µ—Ä–µ–º–µ–∫—Å—ã')
		.setColor(nek.config.basecolor)
		.setDescription("–ö–∞—Ä—Ç–∞ –¥–ª—è " + car.VehicleLabel + " –Ω–∞ <t:" + unixTime +":f>")
		.setImage('attachment://' + car.VehicleLabel + '.png')
		.setFooter({text: '–ù–µ—Ç. –ü–æ–∫–∞ –Ω–µ–ª—å–∑—è –≤—ã–±—Ä–∞—Ç—å –¥–ª—è –∫–∞–∫–æ–π –∏–º–µ–Ω–Ω–æ –º–∞—à–∏–Ω—ã –æ—Ç–æ–±—Ä–∞–∑–∏—Ç—å –∫–∞—Ä—Ç—É. –ñ–¥–∏—Ç–µ –æ–±–Ω–æ–≤—ã'})
	const fileWithName = new Discord.AttachmentBuilder(mappic, { name: car.VehicleLabel + '.png' });
	await mapmsg.edit({files: [fileWithName], embeds: [embed]}); // –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º
	return;		
}
async function sendPhoto(nek, interaction, args) {
	
}


const fullbbox = "31.262970,60.444011,28.473816,59.451358"; // https://i.imgur.com/l6al1YY.png

const partbboxes = [ // https://i.imgur.com/ljnXWyw.png
"31.262970,60.444011,28.473816,60.077345", // top
"31.262970,60.077345,28.473816,59.983189", // upcity
"31.262970,59.983189,28.473816,59.905812", // midcity
"31.262970,59.905812,28.473816,59.830670", // downcity
"31.262970,59.830670,28.473816,59.451358"] // bottom

// –¥–ª—è –Ω–æ—Ä–º–∞–ª—å–Ω–æ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ç–∏–ø–∞ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞
const readableType = {
	'trolley': '—Ç—Ä–æ–ª–ª–µ–π–±—É—Å',
	'bus': '–∞–≤—Ç–æ–±—É—Å',
	'tram': '—Ç—Ä–∞–º–≤–∞–π'
}
const toShortType = {
	'trolley': 1,
	'bus': 2,
	'tram': 3
}
const fromShortType = [
	'trolley',
	'bus',
	'tram'
]

const dirToBlock = ["üü¶", "üüß"];

const funnyLoadingStrings = [
	// –û—Å–Ω–æ–≤–Ω–æ–π
	"–ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö...",
	
	// –í–Ω—è—Ç–Ω–æ
	"–ü–æ–¥–æ–∂–¥–∏—Ç–µ...",
	"–ó–∞–≥—Ä—É–∑–∫–∞...",
	"–ó–∞–≥—Ä—É–∂–∞–µ–º...",
	"–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ...",
	"–ü–æ–¥–∫–ª—é—á–∞—é—Å—å...",
	"–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ —Å–µ—Ä–≤–µ—Ä—É...",
	"–ó–∞–ø—É—Å–∫–∞–µ–º...",
	"–ó–∞–ø—É—Å–∫–∞—é—Å—å...",
	
	// –°–ª–∏—à–∫–æ–º –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω–æ
	"–ü–æ–¥–æ–∂–¥–∏—Ç–µ, –æ–ø–µ—Ä–∞—Ü–∏—è –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è...",
	"–û–∂–∏–¥–∞–π—Ç–µ...",
	"–°–µ–π—á–∞—Å, –ø–æ–≥–æ–¥–∏—Ç–µ...",
	"–û–¥–∏–Ω –º–æ–º–µ–Ω—Ç...",
	"–ú–∏–Ω—É—Ç–∫—É...",
	"Loading...",
	
	// bruh, –Ω–æ —Ö–æ—Ç—è –±—ã –ø–æ–Ω—è—Ç–Ω–æ, —á—Ç–æ –∏–¥—ë—Ç –∑–∞–≥—Ä—É–∑–∫–∞
	"–í—Ç—ã–∫–∞–µ–º...",
	"–∞–≥–¥–µ? –ê, —â–∞...",
	"–ï—Å—Ç—å –ª–∏ —É –ø–∏–Ω–≥–≤–∏–Ω–æ–≤ –∫–æ–ª–µ–Ω–∏... —Ö–º. –ê, –Ω—É –¥–∞, –ø–∏—Ç–µ—Ä. –©–∞...",
	"–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è. —à—É—Ç–∫–∞, —â–∞...",
	"–©–∞ –∑–∞–π–¥—É, –ø–æ—Å–º–æ—Ç—Ä—é, —á–µ —Ç–∞–º –ø–ª–∞–≤–∞–µ—Ç –≤ –ø–∏—Ç–µ—Ä–µ...",
	"–í–Ω–∏–º–∞–Ω–∏–µ! –î–ª—è —Ä–∞–±–æ—Ç—ã –∫–æ–º–∞–Ω–¥—ã –Ω—É–∂–Ω–æ –∑–∞–ø–ª–∞—Ç–∏—Ç—å 9.99$. –•–∞, –Ω–µ—Ç. –ü—Ä–æ—Å—Ç–æ –ø–æ–¥–æ–∂–¥–∏ –µ—â—ë –Ω–µ–º–Ω–æ–≥–æ...",
	
	// mega bruh
	"–°—ç—Ä, –ø—Ä–æ—à—É –í–∞—Å, –Ω–µ –±–µ–π—Ç–µ –º–æ—é –≥—Ä—É–¥–Ω—É—é –∫–ª–µ—Ç–∫—É –∞—Ä–º–∞—Ç—É—Ä–æ–π ü§ì",
	"–í–∞—É. –û–Ω–æ —Ä–∞–±–æ—Ç–∞–µ—Ç",
	"–í –ø–∏—Ç–µ—Ä–µ –ø–∏—Ç—å... –í –ø–∏—Ç–µ—Ä–µ –ø–∏—Ç—å...",
	"–ù–∏—Å–∏–∫—Å - –ø–∏–ø–∞",
	"–ò—Ö —Å–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ~",
	"–ö–æ–≥–¥–∞ –º–æ—Å–∫–æ–≤—Å–∫–æ-–ø–∏—Ç–µ—Ä—Å–∫–∞—è –≤–µ—Ç–∫–∞ –º–µ—Ç—Ä–æ?"
];

class Orgp {
	constructor(nek){
		this.category = "transport";
		
		this.perms = ["EMBED_LINKS", "ATTACH_FILES"];
        this.name = "orgp"; // –∏–º—è –∫–æ–º–∞–Ω–¥—ã
		this.desc = "–ø–∏—Ç–µ—Ä—Å–∫–∏–π —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç"; // –æ–ø–∏—Å–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã –≤ –æ–±—â–µ–º —Å–ø–∏—Å–∫–µ –∫–æ–º–∞–Ω–¥
		this.advdesc = "–ë–µ—Ä—ë—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –º–∞—Ä—à—Ä—É—Ç–∞—Ö –≤ –°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥–µ —Å [—Å–∞–π—Ç–∞ \"–ü–æ—Ä—Ç–∞–ª –û–±—â–µ—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞ –°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥–∞\"](https://transport.orgp.spb.ru/).\n–§–æ—Ç–æ –∏ –¥–∞–Ω–Ω—ã–µ –æ –º–∞—à–∏–Ω–∞—Ö –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è—é—Ç—Å—è —Å–∞–π—Ç–æ–º [transphoto.org](https://transphoto.org).\n\n–°–¥–µ–ª–∞–Ω–æ —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ –¥–ª—è <@374144960221413386>"; // –æ–ø–∏—Å–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã –≤ –ø–æ–º–æ—â–µ –ø–æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –∫–æ–º–∞–Ω–¥–µ
		this.args = "<–æ–ø–µ—Ä–∞—Ü–∏—è> <—Ç–∏–ø> <–Ω–æ–º–µ—Ä>"; // –∞—Ä–≥—É–º–µ–Ω—Ç—ã –≤ –æ–±—â–µ–º —Å–ø–∏—Å–∫–µ –∫–æ–º–∞–Ω–¥
		this.argsdesc =
		"<–æ–ø–µ—Ä–∞—Ü–∏—è> - `route`/`–º–∞—Ä—à—Ä—É—Ç` (–ø–æ–∏—Å–∫ –º–∞—à–∏–Ω –Ω–∞ –¥–∞–Ω–Ω–æ–º –≤–∞–º–∏ –º–∞—Ä—à—Ä—É—Ç–µ), `search`/`–ø–æ–∏—Å–∫` (–ø–æ–∏—Å–∫ –º–∞—Ä—à—Ä—É—Ç–∞, –µ—Å–ª–∏ –∑–∞–±—ã–ª–∏), `label`/`–Ω–æ–º–µ—Ä` (–ø–æ–∏—Å–∫ –º–∞—à–∏–Ω—ã –ø–æ –Ω–æ–º–µ—Ä—É)\n" +
		"<—Ç–∏–ø> - —Ç—Ä–æ–ª–ª–µ–π–±—É—Å (—Ç—Ä–æ...), –∞–≤—Ç–æ–±—É—Å (–∞–≤...), —Ç—Ä–∞–º–≤–∞–π (—Ç—Ä–∞...)\n" +
		"<–Ω–æ–º–µ—Ä> - –Ω–æ–º–µ—Ä –º–∞—Ä—à—Ä—É—Ç–∞"; // –æ–ø–∏—Å–∞–Ω–∏–µ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ –≤ –ø–æ–º–æ—â–µ –ø–æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –∫–æ–º–∞–Ω–¥–µ
		this.advargs = "<–æ–ø–µ—Ä–∞—Ü–∏—è> <—Ç–∏–ø> <–Ω–æ–º–µ—Ä>"; // –∞—Ä–≥—É–º–µ–Ω—Ç—ã –≤ –ø–æ–º–æ—â–µ –ø–æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –∫–æ–º–∞–Ω–¥–µ
    };
	
	

    async run(nek, client, msg, args){
		args.shift(); // —Ä–µ–∂–µ–º –ø–µ—Ä–≤—ã–π –∞—Ä–≥—É–º–µ–Ω—Ç —Ç.–∫. —ç—Ç–æ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã
		if (!args[0]) {
			let embed = new Discord.EmbedBuilder()
			.setTitle('–ê —á–µ –¥–µ–ª–∞—Ç—å —Ç–æ?')
			.setColor(nek.config.errorcolor)
			.setDescription('–í—ã –Ω–µ —É–∫–∞–∑–∞–ª–∏ –Ω–∏ –æ–¥–Ω–æ–≥–æ –∞—Ä–≥—É–º–µ–Ω—Ç–∞. –ò—Ö "–∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–µ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ" –ø–æ–∫–∞ –Ω–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–æ. –ß–∏—Ç–∞–π—Ç–µ –∞—Ä–≥—É–º–µ–Ω—Ç—ã –≤ `' + nek.config.prefix + this.name + ' --help`')
			await msg.reply({ embeds: [embed] });
			return;
		}
		
		// –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤
		let transType = false;
		let routeName = false;
		let workMode = false;
		let arbArg = false;
		
		for await (const arg of args) {
			// —Ç–∏–ø —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞ (transport type)
			if (arg.toLowerCase().startsWith('—Ç—Ä–æ') || arg.toLowerCase().startsWith('nhj')) { // —Ç—Ä–æ–ª–ª–µ–π–±—É—Å
				transType = "trolley";
			} else if (arg.toLowerCase().startsWith('–∞–≤') || arg.toLowerCase().startsWith('fd')) { // –∞–≤—Ç–æ–±—É—Å
				transType = "bus";
			} else if (arg.toLowerCase().startsWith('—Ç—Ä–∞') || arg.toLowerCase().startsWith('nhf')) { // —Ç—Ä–∞–º–≤–∞–π
				transType = "tram";
				
			// —Ä–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã (work mode)
			} else if (arg.toLowerCase() === 'route' || arg.toLowerCase() === '–º–∞—Ä—à—Ä—É—Ç') {
				workMode = "byRoute";
			} else if (arg.toLowerCase() === 'label' || arg.toLowerCase() === '–Ω–æ–º–µ—Ä') {
				workMode = "byLabel";
			} else if (arg.toLowerCase() === 'search' || arg.toLowerCase() === '–ø–æ–∏—Å–∫') {
				workMode = "searchRoute";
				
			// –ª—é–±–æ–π –∏–Ω–æ–π –ø—Ä–æ–∏–∑–≤–æ–ª—å–Ω—ã–π –∞—Ä–≥—É–º–µ–Ω—Ç (arbitrary argument)
			} else {
				arbArg = arg.toLowerCase();
			}
		}
		if (workMode === "byRoute") {
			await searchByRoute(arbArg, transType);
		} else if (workMode === "byLabel") {
			await searchByLabel(arbArg, transType);
		} else if (workMode === "searchRoute") {
			await searchRouteName(arbArg, transType);
		} else {
			let embed = new Discord.EmbedBuilder()
			.setTitle('–ê —á–µ –¥–µ–ª–∞—Ç—å —Ç–æ?')
			.setColor(nek.config.errorcolor)
			.setDescription('–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ–ø–µ—Ä–∞—Ü–∏—è. –ß–∏—Ç–∞–π—Ç–µ –∞—Ä–≥—É–º–µ–Ω—Ç—ã –≤ `' + nek.config.prefix + this.name + ' --help`')
			await msg.reply({ embeds: [embed] });
		}
		return;
		
		
		async function searchByRoute(routeName, transType) {
			if (!routeName) {
				let embed = new Discord.EmbedBuilder()
					.setTitle('–ê —á—Ç–æ –∏—Å–∫–∞—Ç—å?')
					.setColor(nek.config.errorcolor)
					.setDescription("–£–∫–∞–∂–∏—Ç–µ –Ω–æ–º–µ—Ä –º–∞—Ä—à—Ä—É—Ç–∞")
				await msg.reply({ embeds: [embed] }); // –∑–∞–ø–æ–º–∏–Ω–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
				return;
			}
			if (!transType) {
				let embed = new Discord.EmbedBuilder()
					.setTitle('–ê —á—Ç–æ –∏—Å–∫–∞—Ç—å?')
					.setColor(nek.config.errorcolor)
					.setDescription("–£–∫–∞–∂–∏—Ç–µ —Ç–∏–ø —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞")
				await msg.reply({ embeds: [embed] }); // –∑–∞–ø–æ–º–∏–Ω–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
				return;
			}
			let loadingString;
			if (Math.random() > 0.5) { // –≤–µ—Ä–æ—è—Ç–æ—Å—Ç—å 50/50
				loadingString = funnyLoadingStrings[Math.floor(Math.random() * (funnyLoadingStrings.length))]; // –ø–æ–ª—É—á–∞–µ–º —Ä–∞–Ω–¥–æ–º–Ω—É—é —Å–º–µ—à–Ω—è–≤–∫—É
			} else {
				loadingString = funnyLoadingStrings[0] // –ø–æ–ª—É—á–∞–µ–º –Ω–æ—Ä–º–∞–ª—å–Ω—É—é —Å—Ç—Ä–æ–∫—É
			}

			let embed = new Discord.EmbedBuilder()
				.setTitle('–í–µ–¥—É –ø–æ–∏—Å–∫...')
				.setColor(nek.config.basecolor)
				.setDescription(loadingString)
			const waitmsg = await msg.reply({ embeds: [embed] }); // –∑–∞–ø–æ–º–∏–Ω–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
			
			let transports  = await getTransport(transType, fullbbox); // –∏—â–µ–º –ø–æ –≤—Å–µ–º—É –ø–∏—Ç–µ—Ä—É
			if (!transports) { // –µ—Å–ª–∏ –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ (–∏–ª–∏ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞)
				let embed = new Discord.EmbedBuilder()
				.setTitle('–ö–∞–≤–æ')
				.setColor(nek.config.errorcolor)
				.setDescription('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –æ—Ç–≤–µ—Ç –æ—Ç —Å–∞–π—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑')
				await waitmsg.edit({ embeds: [embed] });
				return;
			}
			
			let limitReached = false;
			if (transports.length === 1000) { // –µ—Å–ª–∏ –º—ã —É–ø–µ—Ä–ª–∏—Å—å –≤ –ª–∏–º–∏—Ç –∑–∞–ø—Ä–æ—Å–∞
				transports = [];
				let counter = 0;
				
				let embed = new Discord.EmbedBuilder()
				.setTitle('–í–µ–¥—É –ø–æ–∏—Å–∫...')
				.setColor(nek.config.basecolor)
				.setDescription(loadingString + ' `' + counter + '/' + partbboxes.length + "`")
				await waitmsg.edit({ embeds: [embed] });
				
				// –Ω–∞—á–∏–Ω–∞–µ–º –ø–æ–∏—Å–∫ –ø–æ –∑–æ–Ω–∞–º
				for await (const bbox of partbboxes) {
					counter += 1;
					const transPart  = await getTransport(transType, bbox);
					transports = [...transports, ...transPart];
					if (transPart.length === 1000) {
						limitReached = true;
					}
					embed = new Discord.EmbedBuilder()
						.setTitle('–í–µ–¥—É –ø–æ–∏—Å–∫...')
						.setColor(nek.config.basecolor)
						.setDescription(loadingString + ' `' + counter + '/' + partbboxes.length + "`")
					await waitmsg.edit({ embeds: [embed] });
				}
			}
			
			let routeTransports = []; // —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç—ã –Ω–∞ –Ω—É–∂–Ω–æ–º –Ω–∞–º –º–∞—Ä—à—Ä—É—Ç–µ
			let labels = [];
			let publicOut = []; // –±–æ—Ä—Ç–æ–≤—ã–µ –Ω–æ–º–µ—Ä–∞
			for await (const trans of transports) { // —á–µ–∫–∞–µ–º –≤—Å–µ –º–∞—Ä—à—Ä—É—Ç—ã
				if (trans.RouteShortName.toLowerCase() === routeName) { // –µ—Å–ª–∏ —ç—Ç–æ –º–∞—Ä—à—Ä—É—Ç, –∫–æ—Ç–æ—Ä—ã–π –±—ã–ª —É–∫–∞–∑–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
					routeTransports.push(trans); // –∑–∞–ø–∏—Å–∞—Ç—å –ø–æ–ª–Ω—ã–π –æ–±—ä–µ–∫—Ç —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞
					labels.push(`${(trans.RouteDirection+1)}${trans.VehicleLabel}`) // –∑–∞–ø–∏—Å–∞—Ç—å —á–∏—Å—Ç–æ –Ω–æ–º–µ—Ä–∞ –º–∞—Ä—à—Ä—É—Ç–æ–≤ (–Ω–∞–¥–æ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è customId –∫–Ω–æ–ø–∫–∏)
					publicOut.push(dirToBlock[trans.RouteDirection] + " ‚Ññ" + trans.VehicleLabel + "\n"); // –∑–∞–ø–∏—Å–∞—Ç—å –≤–∏–¥–∏–º—ã–µ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–∞–Ω–Ω—ã–µ
				}
			}
			
			publicOut.sort(); // —Å–æ—Ä—Ç–∏—Ä—É–µ–º
			publicOut = publicOut.join(''); // –ø—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –º–∞—Å—Å–∏–≤ –≤ —Å—Ç—Ä–æ–∫—É
			if (!routeTransports[0]) { // –µ—Å–ª–∏ –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞—à–ª–∏
				let embed = new Discord.EmbedBuilder()
				.setTitle('no bitches')
				.setColor(nek.config.errorcolor)
				.setDescription('–ù–µ –Ω–∞—à–µ–ª –Ω–∏—á–µ–≥–æ')
				await waitmsg.edit({ embeds: [embed] });
				return;
			}
			
			// —ç–º–±–µ–¥
			embed = new Discord.EmbedBuilder()
				.setTitle('–ú–∞—Ä—à—Ä—É—Ç ' + routeTransports[0].RouteShortName)
				.setColor(nek.config.basecolor)
				.setDescription("–ù–∞–π–¥–µ–Ω–æ " + routeTransports.length + " (" + readableType[transType] + "):\n" + publicOut + "\n" +
				"üü¶ - —Ç—É–¥–∞ / üüß - –æ–±—Ä–∞—Ç–Ω–æ\n" +
				"[:map: –ö–∞—Ä—Ç–∞ –º–∞—Ä—à—Ä—É—Ç–∞](https://transport.orgp.spb.ru/routes/" + routeTransports[0].RouteId + ")")
			if (limitReached) {
				embed.setFooter({text: "–í–ù–ò–ú–ê–ù–ò–ï! –ë—ã–ª –¥–æ—Å—Ç–∏–≥–Ω—É—Ç –ª–∏–º–∏—Ç —Å–∞–π—Ç–∞. –ò–º–µ–π—Ç–µ –≤–≤–∏–¥—É, —á—Ç–æ –≤ —Å–ø–∏—Å–∫–µ –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É–µ—Ç –Ω–µ –≤–µ—Å—å —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç. –≠—Ç–æ –Ω–µ –≤–∞—à–∞ –≤–∏–Ω–∞, –ø—Ä–æ—Å—Ç–æ —Å–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞."});
			}
			
			// —Å–ø–∏—Å–∫–∏
			let selectList
			if (labels.length <= 25) {
				const zipedLabels = numco.compress(labels); // —Å–∂–∏–º–∞–µ–º –±–æ—Ä—Ç–æ–≤—ã–µ –Ω–æ–º–µ—Ä–∞
				selectList = new Discord.StringSelectMenuBuilder()
					.setCustomId(msg.author.id + "_0_orgp_l_p")
					.setPlaceholder('–ü–æ–ª—É—á–∏—Ç—å –±–æ–ª—å—à–µ –∏–Ω—Ñ—ã –æ...')
					.setDisabled(true)
				
				await labels.forEach((label) => {
					selectList.addOptions({
						label: label.substring(1),
						value: String(routeTransports[0].RouteId + "_" + label + "_" + zipedLabels)
					});
				});
			} else {
				const zipedLabels = numco.compress(labels); // —Å–∂–∏–º–∞–µ–º –±–æ—Ä—Ç–æ–≤—ã–µ –Ω–æ–º–µ—Ä–∞
				selectList = new Discord.StringSelectMenuBuilder()
					.setCustomId(msg.author.id + "_0_orgp_l_p")
					.setPlaceholder('–ü–æ–ª—É—á–∏—Ç—å –±–æ–ª—å—à–µ –∏–Ω—Ñ—ã –æ...')
					.setDisabled(true)
				selectList.addOptions({
					label: 'too much',
					value: 'too much'
				});
			}
			
			
			// –∫–Ω–æ–ø–∫–∏
			const photo = new Discord.ButtonBuilder()
				.setCustomId(msg.author.id + "_0_orgp_b_p")
				.setLabel('–§–æ—Ç–æ')
				.setStyle(Discord.ButtonStyle.Primary)
				.setDisabled(true)
			const geo = new Discord.ButtonBuilder()
				.setCustomId(msg.author.id + "_0_orgp_b_g")
				.setLabel('–ú–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ')
				.setStyle(Discord.ButtonStyle.Primary)
				.setDisabled(true)
			const update = new Discord.ButtonBuilder()
				.setCustomId(msg.author.id + "_0_orgp_b_u")
				.setLabel('–û–±–Ω–æ–≤–∏—Ç—å')
				.setStyle(Discord.ButtonStyle.Secondary)
				.setDisabled(true)
			
			// —Å–æ–∑–¥–∞–µ–º —Å—Ç—Ä–æ–∫–∏ –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤
			const listRow = new Discord.ActionRowBuilder().addComponents(selectList);
			const buttonsRow = new Discord.ActionRowBuilder().addComponents(photo, geo, update);
			
			await waitmsg.edit({ embeds: [embed], components: [listRow, buttonsRow] });
			
			return;
		}
		
		// –ü–æ–∏—Å–∫ –ø–æ –±–æ—Ä—Ç–æ–≤–æ–º—É –Ω–æ–º–µ—Ä—É
		async function searchByLabel(label, type){
			let embed = new Discord.EmbedBuilder()
				.setTitle('–ü–æ–∏—Å–∫ –ø–æ –±–æ—Ä—Ç–æ–≤–æ–º—É –Ω–æ–º–µ—Ä—É')
				.setColor(nek.config.basecolor)
				.setDescription('–ü–æ–∫–∞ —á—Ç–æ –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ')
			await msg.reply({ embeds: [embed] }); // –∑–∞–ø–æ–º–∏–Ω–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
			return;
		}
		
		// –ü–æ–∏—Å–∫ –º–∞—Ä—à—Ä—É—Ç–∞
		async function searchRouteName(approxName, type){
			if (!approxName) {
				let embed = new Discord.EmbedBuilder()
					.setTitle('–ú–∞—Ä—à—Ä—É—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω')
					.setColor(nek.config.errorcolor)
					.setDescription('–£–∫–∞–∂–∏—Ç–µ —Ö–æ—Ç—è –±—ã –Ω–æ–º–µ—Ä –º–∞—Ä—à—Ä—É—Ç–∞')
				await msg.reply({ embeds: [embed] }); // –∑–∞–ø–æ–º–∏–Ω–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
				return;
			}
			const searchResults = await searchRoute(approxName, type);
			if (!type) {
				type = "–ª—é–±–æ–π";
			} else {
				type = readableType[type];
			}
			if (!searchResults || !searchResults[0]) {
				let embed = new Discord.EmbedBuilder()
					.setTitle('–ú–∞—Ä—à—Ä—É—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω')
					.setColor(nek.config.errorcolor)
					.setDescription('–ù–µ –Ω–∞–π–¥–µ–Ω–æ –Ω–∏ –æ–¥–Ω–æ–≥–æ –º–∞—Ä—à—Ä—É—Ç–∞ —Å –ø–æ—Ö–æ–∂–∏–º –Ω–æ–º–µ—Ä–æ–º')
				await msg.reply({ embeds: [embed] }); // –∑–∞–ø–æ–º–∏–Ω–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
				return;
			}
			
			let totalFound
			if (searchResults.length === 20) {
				totalFound = "20 –∏–ª–∏ –±–æ–ª–µ–µ";
			} else {
				totalFound = searchResults.length;
			}
			
			let routesList = "```\n";
			for await (const route of searchResults) {
				routesList += route.ShortName + " - " + readableType[route.TransportType] + "\n";
			}
			routesList += "```";
			let embed = new Discord.EmbedBuilder()
				.setTitle('–ü–æ–∏—Å–∫ –º–∞—Ä—à—Ä—É—Ç–∞')
				.setColor(nek.config.basecolor)
				.setDescription("–ü–æ –∑–∞–ø—Ä–æ—Å—É `" + approxName + "` —Å—Ä–µ–¥–∏ —Ç–∏–ø–∞ `" + type + "` –±—ã–ª–æ –Ω–∞–π–¥–µ–Ω–æ `" + totalFound + "` –º–∞—Ä—à—Ä—É—Ç–æ–≤:\n" + routesList +
				'\n–°–æ–≤–µ—Ç—É–µ–º –¥–ª—è –ø–æ–∏—Å–∫–∞ –≤—Å—ë —Ç–∞–∫–∏ –≤–æ—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—Å—è [–æ—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–º —Å–∞–π—Ç–æ–º](https://transport.orgp.spb.ru/routes)')
			msg.reply({ embeds: [embed] });
			return;
		}
	}
	
	async interaction(nek, interaction, args){
		
		
		
		//if (args[4] === "g"){ // geo
		//	await sendMap(nek, interaction, args);
		//}
		//if (args[4] === "p"){ // photo
		//	await sendPhoto(nek, interaction, args);
		//}
		
		
		return;
	}
};

module.exports = Orgp;

